
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Mar 17 12:09:47 UTC 2023
//----------------------------------------------------

package ditto.parser;

import java_cup.runtime.*;
import ditto.lexer.Lexer;
import ditto.lexer.Token;
import ditto.errors.ErrorHandler;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Mar 17 12:09:47 UTC 2023
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\003\000\002\005\005" +
    "\000\002\005\003\000\002\006\004\000\002\006\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\020\004\012\005\020\006\015\007\007\010" +
    "\021\024\011\025\014\001\002\000\040\002\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\026\uffea" +
    "\001\002\000\016\002\ufff9\016\062\017\063\022\ufff9\023" +
    "\ufff9\026\ufff9\001\002\000\026\002\ufff6\014\054\015\052" +
    "\016\ufff6\017\ufff6\020\053\021\055\022\ufff6\023\ufff6\026" +
    "\ufff6\001\002\000\016\004\012\005\020\006\015\007\007" +
    "\010\021\025\014\001\002\000\004\002\050\001\002\000" +
    "\020\004\012\005\020\006\015\007\007\010\021\024\011" +
    "\025\014\001\002\000\040\002\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\026\uffe6\001\002\000" +
    "\004\002\001\001\002\000\020\004\012\005\020\006\015" +
    "\007\007\010\021\024\011\025\014\001\002\000\040\002" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\026\uffe4\001\002\000\010\002\uffff\023\043\026\uffff" +
    "\001\002\000\040\002\uffee\007\uffee\010\uffee\011\033\012" +
    "\032\013\031\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\026\uffee\001\002\000\040\002" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\026\uffe5\001\002\000\016\004\012\005\020\006\015" +
    "\007\007\010\021\025\014\001\002\000\040\002\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\026" +
    "\uffe7\001\002\000\012\002\ufffb\022\ufffb\023\ufffb\026\ufffb" +
    "\001\002\000\012\002\ufffd\022\040\023\ufffd\026\ufffd\001" +
    "\002\000\032\002\ufff1\007\026\010\027\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\026" +
    "\ufff1\001\002\000\016\004\012\005\020\006\015\007\007" +
    "\010\021\025\014\001\002\000\016\004\012\005\020\006" +
    "\015\007\007\010\021\025\014\001\002\000\040\002\uffef" +
    "\007\uffef\010\uffef\011\033\012\032\013\031\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\026\uffef\001\002\000\016\004\012\005\020\006\015\007" +
    "\007\010\021\025\014\001\002\000\016\004\012\005\020" +
    "\006\015\007\007\010\021\025\014\001\002\000\016\004" +
    "\012\005\020\006\015\007\007\010\021\025\014\001\002" +
    "\000\040\002\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\026\uffed\001\002\000\040\002\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\026" +
    "\uffec\001\002\000\040\002\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\026\uffeb\001\002\000\040" +
    "\002\ufff0\007\ufff0\010\ufff0\011\033\012\032\013\031\014" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\026\ufff0\001\002\000\020\004\012\005\020\006" +
    "\015\007\007\010\021\024\011\025\014\001\002\000\012" +
    "\002\ufffc\022\ufffc\023\ufffc\026\ufffc\001\002\000\040\002" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\026\uffe9\001\002\000\020\004\012\005\020\006\015" +
    "\007\007\010\021\024\011\025\014\001\002\000\012\002" +
    "\ufffe\022\040\023\ufffe\026\ufffe\001\002\000\004\026\046" +
    "\001\002\000\040\002\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\026\uffe3\001\002\000\012\002" +
    "\ufffa\022\ufffa\023\ufffa\026\ufffa\001\002\000\004\002\000" +
    "\001\002\000\040\002\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\026\uffe8\001\002\000\016\004" +
    "\012\005\020\006\015\007\007\010\021\025\014\001\002" +
    "\000\016\004\012\005\020\006\015\007\007\010\021\025" +
    "\014\001\002\000\016\004\012\005\020\006\015\007\007" +
    "\010\021\025\014\001\002\000\016\004\012\005\020\006" +
    "\015\007\007\010\021\025\014\001\002\000\032\002\ufff3" +
    "\007\026\010\027\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\026\ufff3\001\002\000\032" +
    "\002\ufff5\007\026\010\027\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\026\ufff5\001\002" +
    "\000\032\002\ufff2\007\026\010\027\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\026\ufff2" +
    "\001\002\000\032\002\ufff4\007\026\010\027\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\026\ufff4\001\002\000\016\004\012\005\020\006\015\007" +
    "\007\010\021\025\014\001\002\000\016\004\012\005\020" +
    "\006\015\007\007\010\021\025\014\001\002\000\026\002" +
    "\ufff8\014\054\015\052\016\ufff8\017\ufff8\020\053\021\055" +
    "\022\ufff8\023\ufff8\026\ufff8\001\002\000\026\002\ufff7\014" +
    "\054\015\052\016\ufff7\017\ufff7\020\053\021\055\022\ufff7" +
    "\023\ufff7\026\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\030\002\007\003\012\004\015\005\023\006" +
    "\022\007\004\010\005\011\024\012\016\013\003\014\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\050\014\021\001\001\000\002\001\001" +
    "\000\020\006\046\007\004\010\005\011\024\012\016\013" +
    "\003\014\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\044\004\015\005\023\006\022\007\004\010" +
    "\005\011\024\012\016\013\003\014\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\041\014\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\036\013\003\014\021\001\001\000\010\012\027" +
    "\013\003\014\021\001\001\000\002\001\001\000\006\013" +
    "\035\014\021\001\001\000\006\013\034\014\021\001\001" +
    "\000\006\013\033\014\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\040\007\004\010\005\011\024\012\016\013\003\014" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\043\006\022\007\004\010\005\011\024\012\016\013" +
    "\003\014\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\060\012\016\013\003\014\021" +
    "\001\001\000\012\011\057\012\016\013\003\014\021\001" +
    "\001\000\012\011\056\012\016\013\003\014\021\001\001" +
    "\000\012\011\055\012\016\013\003\014\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\064\011\024\012\016\013\003\014" +
    "\021\001\001\000\014\010\063\011\024\012\016\013\003" +
    "\014\021\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errors = new ErrorHandler();
   Lexer lex = (Lexer)getScanner();
   lex.setErrorHandler(errors);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private ErrorHandler errors;
   public void syntax_error(Symbol token) {
     errors.syntaxError((Token)token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXPR ::= DISJUNCTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DISJUNCTION ::= DISJUNCTION OR CONJUNCTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DISJUNCTION",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DISJUNCTION ::= CONJUNCTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DISJUNCTION",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONJUNCTION ::= CONJUNCTION AND NEGATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNCTION",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONJUNCTION ::= NEGATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNCTION",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NEGATION ::= NOT NEGATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATION",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NEGATION ::= EQUALITY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATION",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EQUALITY ::= EQUALITY EQUAL COMPARISON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EQUALITY ::= EQUALITY NOT_EQUAL COMPARISON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EQUALITY ::= COMPARISON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMPARISON ::= COMPARISON LESS TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMPARISON ::= COMPARISON GREATER TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMPARISON ::= COMPARISON LESS_EQUAL TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMPARISON ::= COMPARISON GREATER_EQUAL TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMPARISON ::= TERM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TERM ::= TERM PLUS FACTOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TERM ::= TERM MINUS FACTOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TERM ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FACTOR ::= FACTOR TIMES UNARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FACTOR ::= FACTOR DIV UNARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FACTOR ::= FACTOR MOD UNARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FACTOR ::= UNARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // UNARY ::= MINUS UNARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // UNARY ::= PLUS UNARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // UNARY ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PRIMARY ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PRIMARY ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRIMARY ::= NAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PRIMARY ::= OPEN_PAR EXPR CLOSE_PAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",10, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

