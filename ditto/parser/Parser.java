
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 04 14:46:16 CEST 2023
//----------------------------------------------------

package ditto.parser;

import java_cup.runtime.*;
import ditto.lexer.Lexer;
import ditto.lexer.Token;
import ditto.errors.ErrorHandler;
import java.util.List;
import java.util.ArrayList;
import ditto.ast.definitions.*;
import ditto.ast.designators.*;
import ditto.ast.expressions.*;
import ditto.ast.literals.*;
import ditto.ast.statements.*;
import ditto.ast.types.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 04 14:46:16 CEST 2023
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\004\000\002\046" +
    "\006\000\002\046\002\000\002\047\004\000\002\047\002" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\051\005\000\002\051\003\000\002" +
    "\052\003\000\002\052\002\000\002\034\007\000\002\035" +
    "\007\000\002\033\011\000\002\033\013\000\002\042\003" +
    "\000\002\042\003\000\002\043\005\000\002\043\003\000" +
    "\002\045\004\000\002\045\005\000\002\044\002\000\002" +
    "\004\003\000\002\006\005\000\002\006\003\000\002\007" +
    "\005\000\002\007\003\000\002\014\004\000\002\014\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\017\006" +
    "\000\002\017\005\000\002\022\005\000\002\022\003\000" +
    "\002\021\006\000\002\021\005\000\002\021\005\000\002" +
    "\021\003\000\002\037\005\000\002\037\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\041\005\000\002\041\003\000\002\016\004\000" +
    "\002\016\005\000\002\016\007\000\002\003\004\000\002" +
    "\003\002\000\002\023\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\006\000" +
    "\002\032\005\000\002\032\004\000\002\036\003\000\002" +
    "\036\004\000\002\036\004\000\002\036\005\000\002\025" +
    "\007\000\002\025\011\000\002\026\013\000\002\026\015" +
    "\000\002\027\007\000\002\030\010\000\002\030\006\000" +
    "\002\040\007\000\002\040\002\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\022\002\ufffe\035\ufffe\042\ufffe\053\ufffe\054" +
    "\ufffe\061\ufffe\063\ufffe\070\ufffe\001\002\000\004\002\315" +
    "\001\002\000\022\002\ufffc\035\ufffc\042\006\053\ufffc\054" +
    "\ufffc\061\ufffc\063\ufffc\070\ufffc\001\002\000\004\070\046" +
    "\001\002\000\020\002\001\035\011\053\010\054\016\061" +
    "\020\063\014\070\015\001\002\000\004\070\303\001\002" +
    "\000\004\070\170\001\002\000\024\002\ufffa\035\ufffa\050" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\061\ufffa\063\ufffa\070\ufffa" +
    "\001\002\000\024\002\ufff8\035\ufff8\050\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\061\ufff8\063\ufff8\070\ufff8\001\002\000\012" +
    "\061\020\063\014\065\165\070\015\001\002\000\050\004" +
    "\uffa8\005\uffa8\017\uffa8\021\uffa8\027\uffa8\034\uffa8\036\uffa8" +
    "\040\uffa8\041\uffa8\043\uffa8\044\uffa8\050\uffa8\061\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\001\002" +
    "\000\004\070\161\001\002\000\024\002\ufffb\035\ufffb\050" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\061\ufffb\063\ufffb\070\ufffb" +
    "\001\002\000\010\061\020\063\014\070\015\001\002\000" +
    "\004\070\027\001\002\000\022\002\ufffd\035\ufffd\050\ufffd" +
    "\053\ufffd\054\ufffd\061\ufffd\063\ufffd\070\ufffd\001\002\000" +
    "\024\002\ufff9\035\ufff9\050\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\061\ufff9\063\ufff9\070\ufff9\001\002\000\070\002\uffa9\004" +
    "\uffa9\005\uffa9\017\uffa9\021\uffa9\027\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\047\uffa9\050\uffa9\053\uffa9\054\uffa9\055\uffa9\061\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\001" +
    "\002\000\012\021\033\025\036\030\034\031\035\001\002" +
    "\000\100\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\031\030\uffc1\031\uffc1\032\uffc1\033\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\057\uffc1\060\uffc1\001" +
    "\002\000\016\021\uffbf\023\030\025\uffbf\026\uffbf\030\uffbf" +
    "\031\uffbf\001\002\000\070\002\uffaa\004\uffaa\005\uffaa\017" +
    "\uffaa\021\uffaa\027\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\043\uffaa\044\uffaa\045\uffaa\047\uffaa\050" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\061\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\001\002\000\004\070" +
    "\032\001\002\000\100\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\057\uffc0" +
    "\060\uffc0\001\002\000\032\004\044\005\064\017\056\021" +
    "\055\027\047\034\045\061\042\064\066\065\057\066\050" +
    "\067\063\070\046\001\002\000\004\070\155\001\002\000" +
    "\032\004\044\005\064\017\056\021\055\027\047\034\045" +
    "\061\042\064\066\065\057\066\050\067\063\070\046\001" +
    "\002\000\004\070\037\001\002\000\076\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\057\uffc3\060\uffc3\001\002\000\064\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\032" +
    "\uffd3\033\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\057\uffd3\060\uffd3\001\002\000\042\011\151\012" +
    "\152\020\uffe2\022\uffe2\023\uffe2\024\uffe2\032\uffe2\033\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\057" +
    "\uffe2\060\uffe2\001\002\000\030\004\044\005\064\017\056" +
    "\021\055\027\047\061\042\064\066\065\057\066\050\067" +
    "\063\070\046\001\002\000\052\011\uffdf\012\uffdf\013\140" +
    "\014\142\015\141\016\143\020\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\032\uffdf\033\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\057\uffdf\060\uffdf\001\002\000\030\004" +
    "\044\005\064\017\056\021\055\027\047\061\042\064\066" +
    "\065\057\066\050\067\063\070\046\001\002\000\032\004" +
    "\044\005\064\017\056\021\055\027\047\034\045\061\042" +
    "\064\066\065\057\066\050\067\063\070\046\001\002\000" +
    "\076\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\030\uffbf\032\uffbf\033\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\057\uffbf\060\uffbf\001\002\000\030" +
    "\004\044\005\064\017\056\021\055\027\047\061\042\064" +
    "\066\065\057\066\050\067\063\070\046\001\002\000\064" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\032\uffbd\033\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\057\uffbd\060\uffbd\001\002" +
    "\000\064\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\032\uffcd\033\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\057\uffcd\060\uffcd" +
    "\001\002\000\064\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\020\uffca\022\uffca\023\uffca\024\uffca\032\uffca\033\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\057\uffca" +
    "\060\uffca\001\002\000\064\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\032\uffbb\033" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\057\uffbb\060\uffbb\001\002\000\004\023\134\001\002\000" +
    "\014\021\055\022\124\065\057\066\050\067\063\001\002" +
    "\000\032\004\044\005\064\017\056\021\055\027\047\034" +
    "\045\061\042\064\066\065\057\066\050\067\063\070\046" +
    "\001\002\000\064\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\020\uffbe\022\uffbe\023\uffbe\024\uffbe\032\uffbe\033\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\057\uffbe" +
    "\060\uffbe\001\002\000\034\020\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\033\117\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\057\uffe8\060\uffe8\001\002\000\074\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\110\020\uffcb\021\033\022" +
    "\uffcb\023\uffcb\024\uffcb\025\036\030\034\032\uffcb\033\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\057" +
    "\uffcb\060\uffcb\001\002\000\064\004\uffd7\005\uffd7\006\077" +
    "\007\076\010\075\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\032\uffd7" +
    "\033\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\057\uffd7\060\uffd7\001\002\000\064\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\032\uffbc\033\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\057\uffbc\060\uffbc\001\002\000\030\004\044" +
    "\005\064\017\056\021\055\027\047\061\042\064\066\065" +
    "\057\066\050\067\063\070\046\001\002\000\064\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\020\uffce\022\uffce\023\uffce" +
    "\024\uffce\032\uffce\033\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\057\uffce\060\uffce\001\002\000\012" +
    "\021\055\065\057\066\050\067\063\001\002\000\036\020" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\032\uffe4\033\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\057\uffe4\060" +
    "\uffe4\001\002\000\036\020\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\032\104\033\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\057\uffe6\060\uffe6\001\002\000\056\004\072" +
    "\005\073\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\020\uffda\022\uffda\023\uffda\024\uffda\032\uffda\033\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\057" +
    "\uffda\060\uffda\001\002\000\030\004\044\005\064\017\056" +
    "\021\055\027\047\061\042\064\066\065\057\066\050\067" +
    "\063\070\046\001\002\000\030\004\044\005\064\017\056" +
    "\021\055\027\047\061\042\064\066\065\057\066\050\067" +
    "\063\070\046\001\002\000\064\004\uffd8\005\uffd8\006\077" +
    "\007\076\010\075\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\032\uffd8" +
    "\033\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\057\uffd8\060\uffd8\001\002\000\030\004\044\005\064" +
    "\017\056\021\055\027\047\061\042\064\066\065\057\066" +
    "\050\067\063\070\046\001\002\000\030\004\044\005\064" +
    "\017\056\021\055\027\047\061\042\064\066\065\057\066" +
    "\050\067\063\070\046\001\002\000\030\004\044\005\064" +
    "\017\056\021\055\027\047\061\042\064\066\065\057\066" +
    "\050\067\063\070\046\001\002\000\064\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\032\uffd6\033\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\057\uffd6\060\uffd6\001\002\000\064\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\032\uffd5\033\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\057\uffd5\060\uffd5\001\002\000\064" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\032\uffd4\033\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\057\uffd4\060\uffd4\001\002" +
    "\000\064\004\uffd9\005\uffd9\006\077\007\076\010\075\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\032\uffd9\033\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\057\uffd9\060\uffd9" +
    "\001\002\000\032\004\044\005\064\017\056\021\055\027" +
    "\047\034\045\061\042\064\066\065\057\066\050\067\063" +
    "\070\046\001\002\000\036\020\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\032\uffe5\033\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\057\uffe5\060\uffe5\001\002\000\064\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\032\uffcc\033\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\057\uffcc\060\uffcc\001\002\000" +
    "\064\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\032\uffd2\033\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\057\uffd2\060\uffd2\001" +
    "\002\000\034\004\044\005\064\017\056\020\113\021\055" +
    "\027\047\034\045\061\042\064\066\065\057\066\050\067" +
    "\063\070\046\001\002\000\006\020\115\024\114\001\002" +
    "\000\006\020\uffc5\024\uffc5\001\002\000\064\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\020\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\032\uffc7\033\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\057\uffc7\060\uffc7\001\002\000\032\004" +
    "\044\005\064\017\056\021\055\027\047\034\045\061\042" +
    "\064\066\065\057\066\050\067\063\070\046\001\002\000" +
    "\064\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\032\uffc8\033\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\057\uffc8\060\uffc8\001" +
    "\002\000\006\020\uffc6\024\uffc6\001\002\000\032\004\044" +
    "\005\064\017\056\021\055\027\047\034\045\061\042\064" +
    "\066\065\057\066\050\067\063\070\046\001\002\000\036" +
    "\020\uffe7\022\uffe7\023\uffe7\024\uffe7\032\104\033\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\057\uffe7" +
    "\060\uffe7\001\002\000\004\020\122\001\002\000\064\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\032\uffc9\033\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\057\uffc9\060\uffc9\001\002\000" +
    "\010\022\uffb9\023\131\024\uffb9\001\002\000\064\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\032\uffb8\033\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\057\uffb8\060\uffb8\001\002\000\006" +
    "\022\127\024\126\001\002\000\012\021\055\065\057\066" +
    "\050\067\063\001\002\000\064\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\032\uffb7" +
    "\033\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\057\uffb7\060\uffb7\001\002\000\006\022\uffba\024\uffba" +
    "\001\002\000\004\065\132\001\002\000\004\022\133\001" +
    "\002\000\064\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\020" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\032\uffb6\033\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\057\uffb6\060" +
    "\uffb6\001\002\000\070\002\uffab\004\uffab\005\uffab\017\uffab" +
    "\021\uffab\027\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\043\uffab\044\uffab\045\uffab\047\uffab\050\uffab" +
    "\053\uffab\054\uffab\055\uffab\061\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\uffab\070\uffab\001\002\000\064\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\032\uffcf\033\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\057\uffcf\060\uffcf\001\002\000\036" +
    "\020\uffe3\022\uffe3\023\uffe3\024\uffe3\032\uffe3\033\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\057\uffe3" +
    "\060\uffe3\001\002\000\064\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\032\uffd1\033" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\057\uffd1\060\uffd1\001\002\000\030\004\044\005\064\017" +
    "\056\021\055\027\047\061\042\064\066\065\057\066\050" +
    "\067\063\070\046\001\002\000\030\004\044\005\064\017" +
    "\056\021\055\027\047\061\042\064\066\065\057\066\050" +
    "\067\063\070\046\001\002\000\030\004\044\005\064\017" +
    "\056\021\055\027\047\061\042\064\066\065\057\066\050" +
    "\067\063\070\046\001\002\000\030\004\044\005\064\017" +
    "\056\021\055\027\047\061\042\064\066\065\057\066\050" +
    "\067\063\070\046\001\002\000\056\004\072\005\073\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\032\uffdc\033\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\057\uffdc\060\uffdc" +
    "\001\002\000\056\004\072\005\073\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\020\uffde\022\uffde\023\uffde" +
    "\024\uffde\032\uffde\033\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\057\uffde\060\uffde\001\002\000\056" +
    "\004\072\005\073\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\032\uffdb" +
    "\033\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\057\uffdb\060\uffdb\001\002\000\056\004\072\005\073" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\032\uffdd\033\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\057\uffdd\060" +
    "\uffdd\001\002\000\064\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\020\uffd0\022\uffd0\023\uffd0\024\uffd0\032\uffd0\033\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\057" +
    "\uffd0\060\uffd0\001\002\000\030\004\044\005\064\017\056" +
    "\021\055\027\047\061\042\064\066\065\057\066\050\067" +
    "\063\070\046\001\002\000\030\004\044\005\064\017\056" +
    "\021\055\027\047\061\042\064\066\065\057\066\050\067" +
    "\063\070\046\001\002\000\052\011\uffe1\012\uffe1\013\140" +
    "\014\142\015\141\016\143\020\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\032\uffe1\033\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\057\uffe1\060\uffe1\001\002\000\052\011" +
    "\uffe0\012\uffe0\013\140\014\142\015\141\016\143\020\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\032\uffe0\033\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\057\uffe0\060\uffe0" +
    "\001\002\000\076\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\057\uffc2\060\uffc2\001" +
    "\002\000\004\022\157\001\002\000\076\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\057\uffc4\060\uffc4\001\002\000\050\004\uffa7\005\uffa7\017" +
    "\uffa7\021\uffa7\027\uffa7\034\uffa7\036\uffa7\040\uffa7\041\uffa7" +
    "\043\uffa7\044\uffa7\050\uffa7\061\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\001\002\000\004\046\162" +
    "\001\002\000\020\035\ufffc\050\ufffc\053\ufffc\054\ufffc\061" +
    "\ufffc\063\ufffc\070\ufffc\001\002\000\020\035\011\050\164" +
    "\053\010\054\016\061\020\063\014\070\015\001\002\000" +
    "\024\002\ufff3\035\ufff3\050\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\061\ufff3\063\ufff3\070\ufff3\001\002\000\010\061\020\063" +
    "\014\070\015\001\002\000\050\004\uffa6\005\uffa6\017\uffa6" +
    "\021\uffa6\027\uffa6\034\uffa6\036\uffa6\040\uffa6\041\uffa6\043" +
    "\uffa6\044\uffa6\050\uffa6\061\uffa6\063\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\067\uffa6\070\uffa6\001\002\000\050\004\uffa5\005" +
    "\uffa5\017\uffa5\021\uffa5\027\uffa5\034\uffa5\036\uffa5\040\uffa5" +
    "\041\uffa5\043\uffa5\044\uffa5\050\uffa5\061\uffa5\063\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\001\002\000\004" +
    "\017\171\001\002\000\014\020\uffe9\061\020\062\175\063" +
    "\014\070\015\001\002\000\006\020\uffef\024\301\001\002" +
    "\000\004\070\300\001\002\000\004\020\202\001\002\000" +
    "\010\061\020\063\014\070\015\001\002\000\006\020\uffec" +
    "\024\uffec\001\002\000\004\020\uffee\001\002\000\004\070" +
    "\201\001\002\000\006\020\uffea\024\uffea\001\002\000\052" +
    "\004\uffb4\005\uffb4\017\uffb4\021\uffb4\027\uffb4\030\204\034" +
    "\uffb4\036\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4\050\uffb4" +
    "\061\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\001\002\000\050\004\044\005\064\017\056\021\055" +
    "\027\047\034\045\036\217\040\212\041\226\043\222\044" +
    "\213\050\277\061\221\063\014\064\066\065\057\066\050" +
    "\067\063\070\225\001\002\000\010\061\020\063\014\070" +
    "\015\001\002\000\050\004\uffb4\005\uffb4\017\uffb4\021\uffb4" +
    "\027\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4\043\uffb4\044" +
    "\uffb4\050\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\001\002\000\050\004\044\005\064\017" +
    "\056\021\055\027\047\034\045\036\217\040\212\041\226" +
    "\043\222\044\213\050\227\061\221\063\014\064\066\065" +
    "\057\066\050\067\063\070\225\001\002\000\056\004\uffb2" +
    "\005\uffb2\017\uffb2\021\uffb2\027\uffb2\034\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2\045\uffb2\047\uffb2" +
    "\050\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\001\002\000\004\023\276\001\002\000\050" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\110\021\033" +
    "\023\uffcb\025\036\030\034\031\035\032\uffcb\033\uffcb\001" +
    "\002\000\004\070\261\001\002\000\032\004\044\005\064" +
    "\017\056\021\055\027\047\034\045\061\042\064\066\065" +
    "\057\066\050\067\063\070\046\001\002\000\056\004\uffaf" +
    "\005\uffaf\017\uffaf\021\uffaf\027\uffaf\034\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\045\uffaf\047\uffaf" +
    "\050\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067" +
    "\uffaf\070\uffaf\001\002\000\056\004\uffb5\005\uffb5\017\uffb5" +
    "\021\uffb5\027\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\047\uffb5\050\uffb5\061\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\001" +
    "\002\000\056\004\uffac\005\uffac\017\uffac\021\uffac\027\uffac" +
    "\034\uffac\036\uffac\037\uffac\040\uffac\041\uffac\043\uffac\044" +
    "\uffac\045\uffac\047\uffac\050\uffac\061\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\067\uffac\070\uffac\001\002\000\032\004" +
    "\044\005\064\017\056\021\055\027\047\034\045\061\042" +
    "\064\066\065\057\066\050\067\063\070\046\001\002\000" +
    "\056\004\uffb1\005\uffb1\017\uffb1\021\uffb1\027\uffb1\034\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\047\uffb1\050\uffb1\061\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\070\uffb1\001\002\000\032\004\044\005" +
    "\064\017\056\021\055\027\047\061\221\063\014\064\066" +
    "\065\057\066\050\067\063\070\225\001\002\000\032\004" +
    "\044\005\064\017\056\021\055\027\047\034\045\061\042" +
    "\064\066\065\057\066\050\067\063\070\046\001\002\000" +
    "\056\004\uffae\005\uffae\017\uffae\021\uffae\027\uffae\034\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\043\uffae\044\uffae\045" +
    "\uffae\047\uffae\050\uffae\061\uffae\063\uffae\064\uffae\065\uffae" +
    "\066\uffae\067\uffae\070\uffae\001\002\000\056\004\uffb0\005" +
    "\uffb0\017\uffb0\021\uffb0\027\uffb0\034\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\043\uffb0\044\uffb0\045\uffb0\047\uffb0\050" +
    "\uffb0\061\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\001\002\000\054\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\021\uffbf\023\uffbf\025\uffbf\026\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\070\uffa8\001\002\000\032" +
    "\004\044\005\064\017\056\021\055\027\047\034\045\061" +
    "\042\064\066\065\057\066\050\067\063\070\046\001\002" +
    "\000\024\002\ufff0\035\ufff0\050\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\061\ufff0\063\ufff0\070\ufff0\001\002\000\056\004\uffad" +
    "\005\uffad\017\uffad\021\uffad\027\uffad\034\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\043\uffad\044\uffad\045\uffad\047\uffad" +
    "\050\uffad\061\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\070\uffad\001\002\000\004\051\232\001\002\000\050" +
    "\004\uffb4\005\uffb4\017\uffb4\021\uffb4\027\uffb4\034\uffb4\036" +
    "\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4\050\uffb4\061\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\001" +
    "\002\000\050\004\044\005\064\017\056\021\055\027\047" +
    "\034\045\036\217\040\212\041\226\043\222\044\213\050" +
    "\234\061\221\063\014\064\066\065\057\066\050\067\063" +
    "\070\225\001\002\000\056\004\uffa0\005\uffa0\017\uffa0\021" +
    "\uffa0\027\uffa0\034\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0\061\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\001\002" +
    "\000\004\023\236\001\002\000\056\004\uff9b\005\uff9b\017" +
    "\uff9b\021\uff9b\027\uff9b\034\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b\050\uff9b\061" +
    "\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b" +
    "\001\002\000\004\052\240\001\002\000\052\004\uffb4\005" +
    "\uffb4\017\uffb4\021\uffb4\027\uffb4\034\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\043\uffb4\044\uffb4\050\uffb4\061\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002" +
    "\000\052\004\044\005\064\017\056\021\055\027\047\034" +
    "\045\036\217\037\242\040\212\041\226\043\222\044\213" +
    "\050\243\061\221\063\014\064\066\065\057\066\050\067" +
    "\063\070\225\001\002\000\050\004\uffb4\005\uffb4\017\uffb4" +
    "\021\uffb4\027\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4\043" +
    "\uffb4\044\uffb4\050\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\070\uffb4\001\002\000\056\004\uffa4\005" +
    "\uffa4\017\uffa4\021\uffa4\027\uffa4\034\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\043\uffa4\044\uffa4\045\uffa4\047\uffa4\050" +
    "\uffa4\061\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\001\002\000\050\004\044\005\064\017\056\021" +
    "\055\027\047\034\045\036\217\040\212\041\226\043\222" +
    "\044\213\050\245\061\221\063\014\064\066\065\057\066" +
    "\050\067\063\070\225\001\002\000\056\004\uffa3\005\uffa3" +
    "\017\uffa3\021\uffa3\027\uffa3\034\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\043\uffa3\044\uffa3\045\uffa3\047\uffa3\050\uffa3" +
    "\061\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\001\002\000\010\045\250\047\uff9c\050\uff9c\001\002" +
    "\000\006\047\255\050\256\001\002\000\032\004\044\005" +
    "\064\017\056\021\055\027\047\034\045\061\042\064\066" +
    "\065\057\066\050\067\063\070\046\001\002\000\004\046" +
    "\252\001\002\000\054\004\uffb4\005\uffb4\017\uffb4\021\uffb4" +
    "\027\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\047\uffb4\050\uffb4\061\uffb4\063\uffb4\064\uffb4" +
    "\065\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002\000\054\004" +
    "\044\005\064\017\056\021\055\027\047\034\045\036\217" +
    "\040\212\041\226\043\222\044\213\045\250\047\uff9c\050" +
    "\uff9c\061\221\063\014\064\066\065\057\066\050\067\063" +
    "\070\225\001\002\000\006\047\uff9d\050\uff9d\001\002\000" +
    "\050\004\uffb4\005\uffb4\017\uffb4\021\uffb4\027\uffb4\034\uffb4" +
    "\036\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4\050\uffb4\061" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\001\002\000\056\004\uff9e\005\uff9e\017\uff9e\021\uff9e\027" +
    "\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\047\uff9e\050\uff9e\061\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\001\002\000\050" +
    "\004\044\005\064\017\056\021\055\027\047\034\045\036" +
    "\217\040\212\041\226\043\222\044\213\050\260\061\221" +
    "\063\014\064\066\065\057\066\050\067\063\070\225\001" +
    "\002\000\056\004\uff9f\005\uff9f\017\uff9f\021\uff9f\027\uff9f" +
    "\034\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\047\uff9f\050\uff9f\061\uff9f\063\uff9f\064\uff9f" +
    "\065\uff9f\066\uff9f\067\uff9f\070\uff9f\001\002\000\004\056" +
    "\262\001\002\000\032\004\044\005\064\017\056\021\055" +
    "\027\047\034\045\061\042\064\066\065\057\066\050\067" +
    "\063\070\046\001\002\000\004\057\264\001\002\000\032" +
    "\004\044\005\064\017\056\021\055\027\047\034\045\061" +
    "\042\064\066\065\057\066\050\067\063\070\046\001\002" +
    "\000\006\051\266\060\267\001\002\000\050\004\uffb4\005" +
    "\uffb4\017\uffb4\021\uffb4\027\uffb4\034\uffb4\036\uffb4\040\uffb4" +
    "\041\uffb4\043\uffb4\044\uffb4\050\uffb4\061\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002\000\032" +
    "\004\044\005\064\017\056\021\055\027\047\034\045\061" +
    "\042\064\066\065\057\066\050\067\063\070\046\001\002" +
    "\000\004\051\271\001\002\000\050\004\uffb4\005\uffb4\017" +
    "\uffb4\021\uffb4\027\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4" +
    "\043\uffb4\044\uffb4\050\uffb4\061\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002\000\050\004\044" +
    "\005\064\017\056\021\055\027\047\034\045\036\217\040" +
    "\212\041\226\043\222\044\213\050\273\061\221\063\014" +
    "\064\066\065\057\066\050\067\063\070\225\001\002\000" +
    "\056\004\uffa1\005\uffa1\017\uffa1\021\uffa1\027\uffa1\034\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\047\uffa1\050\uffa1\061\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\067\uffa1\070\uffa1\001\002\000\050\004\044\005" +
    "\064\017\056\021\055\027\047\034\045\036\217\040\212" +
    "\041\226\043\222\044\213\050\275\061\221\063\014\064" +
    "\066\065\057\066\050\067\063\070\225\001\002\000\056" +
    "\004\uffa2\005\uffa2\017\uffa2\021\uffa2\027\uffa2\034\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\047\uffa2\050\uffa2\061\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\070\uffa2\001\002\000\056\004\uffb3\005\uffb3" +
    "\017\uffb3\021\uffb3\027\uffb3\034\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3" +
    "\061\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070" +
    "\uffb3\001\002\000\024\002\ufff1\035\ufff1\050\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\061\ufff1\063\ufff1\070\ufff1\001\002\000" +
    "\006\020\uffeb\024\uffeb\001\002\000\012\061\020\062\175" +
    "\063\014\070\015\001\002\000\006\020\uffed\024\uffed\001" +
    "\002\000\004\046\304\001\002\000\016\035\011\053\010" +
    "\054\016\061\020\063\014\070\015\001\002\000\022\035" +
    "\ufff6\050\ufff6\053\ufff6\054\ufff6\055\ufff6\061\ufff6\063\ufff6" +
    "\070\ufff6\001\002\000\022\035\ufff4\050\311\053\ufff4\054" +
    "\ufff4\055\310\061\ufff4\063\ufff4\070\ufff4\001\002\000\016" +
    "\035\011\053\010\054\016\061\020\063\014\070\015\001" +
    "\002\000\016\035\ufff5\053\ufff5\054\ufff5\061\ufff5\063\ufff5" +
    "\070\ufff5\001\002\000\024\002\ufff2\035\ufff2\050\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\061\ufff2\063\ufff2\070\ufff2\001\002" +
    "\000\022\035\ufff7\050\ufff7\053\ufff7\054\ufff7\055\ufff7\061" +
    "\ufff7\063\ufff7\070\ufff7\001\002\000\006\023\314\026\031" +
    "\001\002\000\022\002\uffff\035\uffff\042\uffff\053\uffff\054" +
    "\uffff\061\uffff\063\uffff\070\uffff\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\002\003\046\004\001\001\000\002\001" +
    "\001\000\004\047\006\001\001\000\004\037\312\001\001" +
    "\000\016\032\012\033\022\034\016\035\011\036\020\050" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\157\001\001\000\010\021\024\024\023\037\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\155\005\064\006\057\007\067\010\040\011\042\012" +
    "\070\013\061\014\066\015\037\016\052\017\051\020\050" +
    "\021\060\037\025\001\001\000\002\001\001\000\040\004" +
    "\053\005\064\006\057\007\067\010\040\011\042\012\070" +
    "\013\061\014\066\015\037\016\052\017\051\020\050\021" +
    "\060\037\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\064\015" +
    "\147\016\052\017\051\020\050\021\060\037\025\001\001" +
    "\000\002\001\001\000\020\005\064\015\136\016\052\017" +
    "\051\020\050\021\060\037\025\001\001\000\032\005\064" +
    "\010\040\011\042\012\070\013\061\014\135\015\037\016" +
    "\052\017\051\020\050\021\060\037\025\001\001\000\002" +
    "\001\001\000\020\005\064\015\134\016\052\017\051\020" +
    "\050\021\060\037\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\052\020\122\041\124\001\001\000\040" +
    "\004\120\005\064\006\057\007\067\010\040\011\042\012" +
    "\070\013\061\014\066\015\037\016\052\017\051\020\050" +
    "\021\060\037\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\064\015\106\016\052\017\051\020\050\021" +
    "\060\037\025\001\001\000\002\001\001\000\006\016\052" +
    "\020\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\064\013\102\015\037\016\052" +
    "\017\051\020\050\021\060\037\025\001\001\000\022\005" +
    "\064\013\073\015\037\016\052\017\051\020\050\021\060" +
    "\037\025\001\001\000\002\001\001\000\020\005\064\015" +
    "\101\016\052\017\051\020\050\021\060\037\025\001\001" +
    "\000\020\005\064\015\100\016\052\017\051\020\050\021" +
    "\060\037\025\001\001\000\020\005\064\015\077\016\052" +
    "\017\051\020\050\021\060\037\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\064\010\040\011\042\012\070\013\061\014" +
    "\104\015\037\016\052\017\051\020\050\021\060\037\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\111\005\064\006\057\007\067\010\040" +
    "\011\042\012\070\013\061\014\066\015\037\016\052\017" +
    "\051\020\050\021\060\022\110\037\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\115\005\064\006\057\007\067\010\040\011\042\012\070" +
    "\013\061\014\066\015\037\016\052\017\051\020\050\021" +
    "\060\037\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\064\007\117\010\040\011\042\012\070\013" +
    "\061\014\066\015\037\016\052\017\051\020\050\021\060" +
    "\037\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\052\020\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\064\012\146" +
    "\013\061\015\037\016\052\017\051\020\050\021\060\037" +
    "\025\001\001\000\024\005\064\012\145\013\061\015\037" +
    "\016\052\017\051\020\050\021\060\037\025\001\001\000" +
    "\024\005\064\012\144\013\061\015\037\016\052\017\051" +
    "\020\050\021\060\037\025\001\001\000\024\005\064\012" +
    "\143\013\061\015\037\016\052\017\051\020\050\021\060" +
    "\037\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\064\011\153\012\070\013\061\015\037\016\052\017" +
    "\051\020\050\021\060\037\025\001\001\000\026\005\064" +
    "\011\152\012\070\013\061\015\037\016\052\017\051\020" +
    "\050\021\060\037\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\162" +
    "\001\001\000\016\032\012\033\022\034\016\035\011\036" +
    "\020\050\021\001\001\000\002\001\001\000\004\036\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\036\172\042\173\043\171\044\176\045\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\202\001\001\000\062\004\207\005\064\006\057\007\067" +
    "\010\040\011\042\012\070\013\061\014\066\015\037\016" +
    "\052\017\051\020\050\021\210\023\214\024\206\025\223" +
    "\026\213\027\222\030\227\031\215\032\217\036\020\037" +
    "\025\001\001\000\004\036\204\001\001\000\004\003\205" +
    "\001\001\000\062\004\207\005\064\006\057\007\067\010" +
    "\040\011\042\012\070\013\061\014\066\015\037\016\052" +
    "\017\051\020\050\021\210\023\214\024\206\025\223\026" +
    "\213\027\222\030\227\031\215\032\217\036\020\037\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\245\005\064\006\057" +
    "\007\067\010\040\011\042\012\070\013\061\014\066\015" +
    "\037\016\052\017\051\020\050\021\060\037\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\236\005\064\006\057\007\067\010\040\011\042" +
    "\012\070\013\061\014\066\015\037\016\052\017\051\020" +
    "\050\021\060\037\025\001\001\000\002\001\001\000\022" +
    "\005\064\015\147\016\052\017\051\020\050\021\060\036" +
    "\157\037\025\001\001\000\040\004\234\005\064\006\057" +
    "\007\067\010\040\011\042\012\070\013\061\014\066\015" +
    "\037\016\052\017\051\020\050\021\060\037\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\230\005\064\006\057\007\067\010\040\011\042" +
    "\012\070\013\061\014\066\015\037\016\052\017\051\020" +
    "\050\021\060\037\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\232\001\001\000" +
    "\062\004\207\005\064\006\057\007\067\010\040\011\042" +
    "\012\070\013\061\014\066\015\037\016\052\017\051\020" +
    "\050\021\210\023\214\024\206\025\223\026\213\027\222" +
    "\030\227\031\215\032\217\036\020\037\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\240\001\001\000\062\004\207\005" +
    "\064\006\057\007\067\010\040\011\042\012\070\013\061" +
    "\014\066\015\037\016\052\017\051\020\050\021\210\023" +
    "\214\024\206\025\223\026\213\027\222\030\227\031\215" +
    "\032\217\036\020\037\025\001\001\000\004\003\243\001" +
    "\001\000\002\001\001\000\062\004\207\005\064\006\057" +
    "\007\067\010\040\011\042\012\070\013\061\014\066\015" +
    "\037\016\052\017\051\020\050\021\210\023\214\024\206" +
    "\025\223\026\213\027\222\030\227\031\215\032\217\036" +
    "\020\037\025\001\001\000\002\001\001\000\004\040\246" +
    "\001\001\000\002\001\001\000\040\004\250\005\064\006" +
    "\057\007\067\010\040\011\042\012\070\013\061\014\066" +
    "\015\037\016\052\017\051\020\050\021\060\037\025\001" +
    "\001\000\002\001\001\000\004\003\252\001\001\000\064" +
    "\004\207\005\064\006\057\007\067\010\040\011\042\012" +
    "\070\013\061\014\066\015\037\016\052\017\051\020\050" +
    "\021\210\023\214\024\206\025\223\026\213\027\222\030" +
    "\227\031\215\032\217\036\020\037\025\040\253\001\001" +
    "\000\002\001\001\000\004\003\256\001\001\000\002\001" +
    "\001\000\062\004\207\005\064\006\057\007\067\010\040" +
    "\011\042\012\070\013\061\014\066\015\037\016\052\017" +
    "\051\020\050\021\210\023\214\024\206\025\223\026\213" +
    "\027\222\030\227\031\215\032\217\036\020\037\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\262" +
    "\005\064\006\057\007\067\010\040\011\042\012\070\013" +
    "\061\014\066\015\037\016\052\017\051\020\050\021\060" +
    "\037\025\001\001\000\002\001\001\000\040\004\264\005" +
    "\064\006\057\007\067\010\040\011\042\012\070\013\061" +
    "\014\066\015\037\016\052\017\051\020\050\021\060\037" +
    "\025\001\001\000\002\001\001\000\004\003\273\001\001" +
    "\000\040\004\267\005\064\006\057\007\067\010\040\011" +
    "\042\012\070\013\061\014\066\015\037\016\052\017\051" +
    "\020\050\021\060\037\025\001\001\000\002\001\001\000" +
    "\004\003\271\001\001\000\062\004\207\005\064\006\057" +
    "\007\067\010\040\011\042\012\070\013\061\014\066\015" +
    "\037\016\052\017\051\020\050\021\210\023\214\024\206" +
    "\025\223\026\213\027\222\030\227\031\215\032\217\036" +
    "\020\037\025\001\001\000\002\001\001\000\062\004\207" +
    "\005\064\006\057\007\067\010\040\011\042\012\070\013" +
    "\061\014\066\015\037\016\052\017\051\020\050\021\210" +
    "\023\214\024\206\025\223\026\213\027\222\030\227\031" +
    "\215\032\217\036\020\037\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\172\045\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\032\012\033\022\034\016\035\011\036" +
    "\020\050\304\051\305\001\001\000\002\001\001\000\004" +
    "\052\306\001\001\000\016\032\012\033\022\034\016\035" +
    "\011\036\020\050\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errors = new ErrorHandler();
   Lexer lex = (Lexer)getScanner();
   lex.setErrorHandler(errors);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private ErrorHandler errors;
   public void syntax_error(Symbol token) {
     errors.syntaxError((Token)token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= IMPORTs DECLARATIONs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTs ::= IMPORTs IMPORT NAME SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORTs",36, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTs ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORTs",36, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARATIONs ::= DECLARATIONs DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONs",37, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARATIONs ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONs",37, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARATION ::= STRUCT_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARATION ::= MODULE_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATION ::= FUN_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATION ::= VAR_DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATIONs_WITH_VISIBILITY ::= DECLARATIONs_WITH_VISIBILITY VISIBILITY DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONs_WITH_VISIBILITY",39, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARATIONs_WITH_VISIBILITY ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONs_WITH_VISIBILITY",39, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VISIBILITY ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VISIBILITY",40, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILITY ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VISIBILITY",40, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STRUCT_DECL ::= STRUCT IDEN IS DECLARATIONs END 
            {
              DefStruct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_DECL",26, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MODULE_DECL ::= MODULE IDEN IS DECLARATIONs_WITH_VISIBILITY END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODULE_DECL",27, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUN_DECL ::= FUNC IDEN OPEN_PAR FUNC_PARAMs CLOSE_PAR STMTs END 
            {
              DefFunc RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ArrayList<Statement> statements = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DefFunc(id, params, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUN_DECL",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUN_DECL ::= FUNC IDEN OPEN_PAR FUNC_PARAMs CLOSE_PAR R_ARROW TYPE STMTs END 
            {
              DefFunc RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		ArrayList<Statement> statements = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DefFunc(id, params, type, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUN_DECL",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_PARAMs ::= AT_LEAST_ONE_PARAM 
            {
              List<Param> RESULT =null;
		List<Param> l = (List<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMs",32, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_PARAMs ::= NO_PARAM 
            {
              List<Param> RESULT =null;
		List<Param> l = (List<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMs",32, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AT_LEAST_ONE_PARAM ::= AT_LEAST_ONE_PARAM COMMA PARAM 
            {
              List<Param> RESULT =null;
		List<Param> params = (List<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params; params.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AT_LEAST_ONE_PARAM",33, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AT_LEAST_ONE_PARAM ::= PARAM 
            {
              List<Param> RESULT =null;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Param>(); RESULT.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AT_LEAST_ONE_PARAM",33, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAM ::= TYPE IDEN 
            {
              Param RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",35, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAM ::= REF TYPE IDEN 
            {
              Param RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param(t, id, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",35, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NO_PARAM ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NO_PARAM",34, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPR ::= DISJUNCTION 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DISJUNCTION ::= DISJUNCTION OR CONJUNCTION 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DISJUNCTION",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DISJUNCTION ::= CONJUNCTION 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DISJUNCTION",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONJUNCTION ::= CONJUNCTION AND NEGATION 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNCTION",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONJUNCTION ::= NEGATION 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNCTION",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NEGATION ::= NOT NEGATION 
            {
              OperUn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATION",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NEGATION ::= EQUALITY 
            {
              OperUn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATION",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EQUALITY ::= EQUALITY EQUAL COMPARISON 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EQUALITY ::= EQUALITY NOT_EQUAL COMPARISON 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EQUALITY ::= COMPARISON 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMPARISON ::= COMPARISON LESS TERM 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COMPARISON ::= COMPARISON GREATER TERM 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COMPARISON ::= COMPARISON LESS_EQUAL TERM 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COMPARISON ::= COMPARISON GREATER_EQUAL TERM 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMPARISON ::= TERM 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TERM ::= TERM PLUS FACTOR 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TERM ::= TERM MINUS FACTOR 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TERM ::= FACTOR 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FACTOR ::= FACTOR TIMES UNARY 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FACTOR ::= FACTOR DIV UNARY 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FACTOR ::= FACTOR MOD UNARY 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FACTOR ::= UNARY 
            {
              OperBin RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UNARY ::= MINUS UNARY 
            {
              OperUn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UNARY ::= PLUS UNARY 
            {
              OperUn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // UNARY ::= PTR UNARY 
            {
              OperUn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // UNARY ::= AT UNARY 
            {
              OperUn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // UNARY ::= PRIMARY 
            {
              OperUn RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PRIMARY ::= LITERAL 
            {
              Expr RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRIMARY ::= NEW LITERAL 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRIMARY ::= DESIGNATION 
            {
              Expr RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PRIMARY ::= FUNC_CALL 
            {
              Expr RESULT =null;
		Call x = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRIMARY ::= OPEN_PAR EXPR CLOSE_PAR 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNC_CALL ::= DESIGNATION OPEN_PAR EXPRs CLOSE_PAR 
            {
              Call RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Expr> e = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Call(d, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNC_CALL ::= DESIGNATION OPEN_PAR CLOSE_PAR 
            {
              Call RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRs ::= EXPRs COMMA EXPR 
            {
              List<Expr> RESULT =null;
		List<Expr> more = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = more; more.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRs",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRs ::= EXPR 
            {
              List<Expr> RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRs",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DESIGNATION ::= DESIGNATION OPEN_BRACKET EXPR CLOSE_BRACKET 
            {
              Designator RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAccess(d, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATION",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DESIGNATION ::= DESIGNATION DOT IDEN 
            {
              Designator RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAccess(d, name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATION",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DESIGNATION ::= DESIGNATION R_ARROW IDEN 
            {
              Designator RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAccess(new Deref(d), name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATION",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DESIGNATION ::= NAME 
            {
              Designator RESULT =null;
		List<String> name = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATION",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NAME ::= NAME QUADOT IDEN 
            {
              List<String> RESULT =null;
		List<String> more = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = more; more.add(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NAME",29, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NAME ::= IDEN 
            {
              List<String> RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NAME",29, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LITERAL ::= NAT 
            {
              Literal RESULT =null;
		Natural n = (Natural)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LITERAL ::= TRUE 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LITERAL ::= FALSE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LITERAL ::= ARRAY_LITERAL 
            {
              Literal RESULT =null;
		ArrayLiteral a = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LITERALs ::= LITERALs COMMA LITERAL 
            {
              List<Literal> RESULT =null;
		List<Literal> more = (List<Literal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = more; more.add(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALs",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LITERALs ::= LITERAL 
            {
              List<Literal> RESULT =null;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Literal>(); RESULT.add(l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALs",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARRAY_LITERAL ::= OPEN_BRACKET CLOSE_BRACKET 
            {
              ArrayLiteral RESULT =null;
		 RESULT = new ArrayLiteral(new ArrayList<Literal>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LITERAL",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARRAY_LITERAL ::= OPEN_BRACKET LITERALs CLOSE_BRACKET 
            {
              ArrayLiteral RESULT =null;
		List<Literal> ls = (List<Literal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLiteral(ls); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LITERAL",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARRAY_LITERAL ::= OPEN_BRACKET LITERAL SEMICOLON NAT CLOSE_BRACKET 
            {
              ArrayLiteral RESULT =null;
		Literal def = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Natural size = (Natural)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLiteral(def,size); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LITERAL",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STMTs ::= STMTs STMT 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> statements = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = statements; statements.add(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTs",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STMTs ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTs",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // STMT ::= EXPR SEMICOLON 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STMT ::= ASSIGNMENT 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STMT ::= VAR_DECL 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STMT ::= IF_STMT 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STMT ::= FOR_STMT 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // STMT ::= WHILE_STMT 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STMT ::= MATCH_STMT 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STMT ::= RETURN_STMT 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASSIGNMENT ::= DESIGNATION ASSIGN EXPR SEMICOLON 
            {
              Statement RESULT =null;
		Designator name = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assign(name, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VAR_DECL ::= TYPE IDEN SEMICOLON 
            {
              DefVar RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DefVar(t, name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",24, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VAR_DECL ::= TYPE ASSIGNMENT 
            {
              DefVar RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",24, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPE ::= IDEN 
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructType(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPE ::= PTR TYPE 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PointerType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPE ::= ARRAY TYPE 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPE ::= ARRAY NAT TYPE 
            {
              Type RESULT =null;
		Natural size = (Natural)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayType(t, size); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF_STMT ::= IF EXPR THEN STMTs END 
            {
              Statement RESULT =null;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ArrayList<Statement> then = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(cond, then); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IF_STMT ::= IF EXPR THEN STMTs ELSE STMTs END 
            {
              Statement RESULT =null;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		ArrayList<Statement> then = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ArrayList<Statement> els = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(cond, then, els); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR_STMT ::= FOR IDEN FROM EXPR TO EXPR DO STMTs END 
            {
              Statement RESULT =null;
		String index = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Expr from = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr to = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ArrayList<Statement> statements = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(index, from, to, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FOR_STMT ::= FOR IDEN FROM EXPR TO EXPR BY EXPR DO STMTs END 
            {
              Statement RESULT =null;
		String index = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Expr from = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Expr to = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr by = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ArrayList<Statement> statements = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(index, from, to, by, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WHILE_STMT ::= WHILE EXPR DO STMTs END 
            {
              Statement RESULT =null;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		ArrayList<Statement> statements = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(cond, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",21, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MATCH_STMT ::= MATCH EXPR CASE_STMTs OTHERWISE STMTs END 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MATCH_STMT ::= MATCH EXPR CASE_STMTs END 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASE_STMTs ::= CASE EXPR IS STMTs CASE_STMTs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMTs",30, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE_STMTs ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMTs",30, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RETURN_STMT ::= RETURN EXPR SEMICOLON 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",23, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

