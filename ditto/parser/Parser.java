
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 08 12:11:35 UTC 2023
//----------------------------------------------------

package ditto.parser;

import java_cup.runtime.*;
import ditto.lexer.Lexer;
import ditto.lexer.Token;
import ditto.errors.ErrorHandler;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import ditto.ast.Node;
import ditto.ast.Module;
import ditto.ast.definitions.*;
import ditto.ast.designators.*;
import ditto.ast.expressions.*;
import ditto.ast.literals.*;
import ditto.ast.statements.*;
import ditto.ast.types.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 08 12:11:35 UTC 2023
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\004\000\002\047" +
    "\006\000\002\047\002\000\002\040\007\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\002\000" +
    "\002\037\011\000\002\037\013\000\002\043\003\000\002" +
    "\043\003\000\002\044\005\000\002\044\003\000\002\046" +
    "\004\000\002\046\005\000\002\045\002\000\002\011\003" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\021\004\000\002\021\003\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\022\003" +
    "\000\002\012\003\000\002\012\004\000\002\012\004\000" +
    "\002\012\003\000\002\012\003\000\002\012\005\000\002" +
    "\023\006\000\002\023\005\000\002\010\005\000\002\010" +
    "\003\000\002\024\006\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\042\005\000\002\042\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\004" +
    "\004\000\002\004\005\000\002\004\007\000\002\005\006" +
    "\000\002\006\003\000\002\006\002\000\002\007\007\000" +
    "\002\007\005\000\002\025\004\000\002\025\002\000\002" +
    "\026\004\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\006\000" +
    "\002\036\005\000\002\036\004\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\004\000\002\041" +
    "\004\000\002\041\005\000\002\030\007\000\002\030\011" +
    "\000\002\031\013\000\002\031\015\000\002\032\007\000" +
    "\002\033\011\000\002\033\006\000\002\035\007\000\002" +
    "\035\002\000\002\034\005\000\002\034\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\024\002\ufffe\040\ufffe\045\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\076\ufffe\001\002\000\004" +
    "\002\326\001\002\000\024\002\ufff9\040\ufff9\045\006\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\076\ufff9\001\002" +
    "\000\004\076\323\001\002\000\022\002\001\040\013\057" +
    "\011\060\012\061\015\062\021\063\017\076\016\001\002" +
    "\000\024\002\ufffc\040\ufffc\053\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\076\ufffc\001\002\000\060\003\uffa7" +
    "\004\uffa7\005\uffa7\017\uffa7\021\uffa7\032\uffa7\037\uffa7\041" +
    "\uffa7\043\uffa7\044\uffa7\046\uffa7\047\uffa7\053\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\071\uffa7\072\uffa7\073\uffa7\074" +
    "\uffa7\075\uffa7\076\uffa7\001\002\000\060\003\uffa6\004\uffa6" +
    "\005\uffa6\017\uffa6\021\uffa6\032\uffa6\037\uffa6\041\uffa6\043" +
    "\uffa6\044\uffa6\046\uffa6\047\uffa6\053\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\001\002\000\004\076\204\001\002\000\024" +
    "\002\ufffb\040\ufffb\053\ufffb\057\ufffb\060\ufffb\061\ufffb\062" +
    "\ufffb\063\ufffb\076\ufffb\001\002\000\016\057\011\060\012" +
    "\061\015\062\021\072\201\076\016\001\002\000\060\003" +
    "\uffa8\004\uffa8\005\uffa8\017\uffa8\021\uffa8\032\uffa8\037\uffa8" +
    "\041\uffa8\043\uffa8\044\uffa8\046\uffa8\047\uffa8\053\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\071\uffa8\072\uffa8\073\uffa8" +
    "\074\uffa8\075\uffa8\076\uffa8\001\002\000\004\076\175\001" +
    "\002\000\024\002\ufffa\040\ufffa\053\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\076\ufffa\001\002\000\014\057" +
    "\011\060\012\061\015\062\021\076\016\001\002\000\004" +
    "\076\026\001\002\000\074\002\uffa9\003\uffa9\004\uffa9\005" +
    "\uffa9\017\uffa9\021\uffa9\032\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9\050\uffa9\052" +
    "\uffa9\053\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\001" +
    "\002\000\012\021\032\030\035\033\033\034\034\001\002" +
    "\000\100\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7\027\uffc7\030" +
    "\uffc7\031\030\033\uffc7\034\uffc7\035\uffc7\036\uffc7\050\uffc7" +
    "\051\uffc7\053\uffc7\054\uffc7\055\uffc7\066\uffc7\067\uffc7\001" +
    "\002\000\016\021\uffc5\025\027\030\uffc5\031\uffc5\033\uffc5" +
    "\034\uffc5\001\002\000\074\002\uffaa\003\uffaa\004\uffaa\005" +
    "\uffaa\017\uffaa\021\uffaa\032\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa\052" +
    "\uffaa\053\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\001" +
    "\002\000\004\076\031\001\002\000\100\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\050\uffc6\051\uffc6\053\uffc6\054\uffc6" +
    "\055\uffc6\066\uffc6\067\uffc6\001\002\000\034\004\043\005" +
    "\063\017\055\021\054\032\047\037\044\062\041\071\066" +
    "\072\056\073\046\074\062\075\067\076\045\001\002\000" +
    "\004\076\171\001\002\000\034\004\043\005\063\017\055" +
    "\021\054\032\047\037\044\062\041\071\066\072\056\073" +
    "\046\074\062\075\067\076\045\001\002\000\004\076\036" +
    "\001\002\000\076\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\027" +
    "\uffc9\030\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\050\uffc9" +
    "\051\uffc9\053\uffc9\054\uffc9\055\uffc9\066\uffc9\067\uffc9\001" +
    "\002\000\064\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020" +
    "\uffda\022\uffda\024\uffda\025\uffda\027\uffda\035\uffda\036\uffda" +
    "\050\uffda\051\uffda\053\uffda\054\uffda\055\uffda\066\uffda\067" +
    "\uffda\001\002\000\042\011\165\012\166\020\uffe9\022\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\035\uffe9\036\uffe9\050\uffe9\051" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\066\uffe9\067\uffe9\001\002" +
    "\000\032\004\043\005\063\017\055\021\054\032\047\062" +
    "\041\071\066\072\056\073\046\074\062\075\067\076\045" +
    "\001\002\000\052\011\uffe6\012\uffe6\013\154\014\156\015" +
    "\155\016\157\020\uffe6\022\uffe6\024\uffe6\025\uffe6\027\uffe6" +
    "\035\uffe6\036\uffe6\050\uffe6\051\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\066\uffe6\067\uffe6\001\002\000\032\004\043\005\063" +
    "\017\055\021\054\032\047\062\041\071\066\072\056\073" +
    "\046\074\062\075\067\076\045\001\002\000\034\004\043" +
    "\005\063\017\055\021\054\032\047\037\044\062\041\071" +
    "\066\072\056\073\046\074\062\075\067\076\045\001\002" +
    "\000\100\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\112\024\uffc5\025\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\033\uffc5\035\uffc5\036\uffc5\050\uffc5" +
    "\051\uffc5\053\uffc5\054\uffc5\055\uffc5\066\uffc5\067\uffc5\001" +
    "\002\000\064\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020" +
    "\uffc3\022\uffc3\024\uffc3\025\uffc3\027\uffc3\035\uffc3\036\uffc3" +
    "\050\uffc3\051\uffc3\053\uffc3\054\uffc3\055\uffc3\066\uffc3\067" +
    "\uffc3\001\002\000\032\004\043\005\063\017\055\021\054" +
    "\032\047\062\041\071\066\072\056\073\046\074\062\075" +
    "\067\076\045\001\002\000\064\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\020\uffd4\022\uffd4\024\uffd4\025\uffd4\027\uffd4" +
    "\035\uffd4\036\uffd4\050\uffd4\051\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\066\uffd4\067\uffd4\001\002\000\064\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\020\uffd0\022\uffd0\024\uffd0\025\uffd0" +
    "\027\uffd0\035\uffd0\036\uffd0\050\uffd0\051\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\066\uffd0\067\uffd0\001\002\000\064\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\022\uffc1\024\uffc1" +
    "\025\uffc1\027\uffc1\035\uffc1\036\uffc1\050\uffc1\051\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\066\uffc1\067\uffc1\001\002\000\004" +
    "\025\150\001\002\000\036\004\043\005\063\017\055\021" +
    "\054\022\141\032\047\037\044\062\041\071\066\072\056" +
    "\073\046\074\062\075\067\076\045\001\002\000\034\004" +
    "\043\005\063\017\055\021\054\032\047\037\044\062\041" +
    "\071\066\072\056\073\046\074\062\075\067\076\045\001" +
    "\002\000\064\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020" +
    "\uffc4\022\uffc4\024\uffc4\025\uffc4\027\uffc4\035\uffc4\036\uffc4" +
    "\050\uffc4\051\uffc4\053\uffc4\054\uffc4\055\uffc4\066\uffc4\067" +
    "\uffc4\001\002\000\034\020\uffef\022\uffef\024\uffef\025\uffef" +
    "\027\uffef\036\135\050\uffef\051\uffef\053\uffef\054\uffef\055" +
    "\uffef\066\uffef\067\uffef\001\002\000\074\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\126\020\uffd1\021\032\022\uffd1" +
    "\024\uffd1\025\uffd1\027\uffd1\030\035\033\033\035\uffd1\036" +
    "\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1\055\uffd1\066\uffd1" +
    "\067\uffd1\001\002\000\064\004\uffde\005\uffde\006\100\007" +
    "\077\010\076\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\020\uffde\022\uffde\024\uffde\025\uffde\027\uffde\035" +
    "\uffde\036\uffde\050\uffde\051\uffde\053\uffde\054\uffde\055\uffde" +
    "\066\uffde\067\uffde\001\002\000\064\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\020\uffc2\022\uffc2\024\uffc2\025\uffc2\027" +
    "\uffc2\035\uffc2\036\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\066\uffc2\067\uffc2\001\002\000\032\004\043\005" +
    "\063\017\055\021\054\032\047\062\041\071\066\072\056" +
    "\073\046\074\062\075\067\076\045\001\002\000\064\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\022\uffd5\024" +
    "\uffd5\025\uffd5\027\uffd5\035\uffd5\036\uffd5\050\uffd5\051\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\066\uffd5\067\uffd5\001\002\000" +
    "\036\020\uffeb\022\uffeb\024\uffeb\025\uffeb\027\uffeb\035\uffeb" +
    "\036\uffeb\050\uffeb\051\uffeb\053\uffeb\054\uffeb\055\uffeb\066" +
    "\uffeb\067\uffeb\001\002\000\006\021\054\076\110\001\002" +
    "\000\064\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf" +
    "\022\uffbf\024\uffbf\025\uffbf\027\uffbf\035\uffbf\036\uffbf\050" +
    "\uffbf\051\uffbf\053\uffbf\054\uffbf\055\uffbf\066\uffbf\067\uffbf" +
    "\001\002\000\064\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\020\uffc0\022\uffc0\024\uffc0\025\uffc0\027\uffc0\035\uffc0\036" +
    "\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\066\uffc0" +
    "\067\uffc0\001\002\000\036\020\uffed\022\uffed\024\uffed\025" +
    "\uffed\027\uffed\035\105\036\uffed\050\uffed\051\uffed\053\uffed" +
    "\054\uffed\055\uffed\066\uffed\067\uffed\001\002\000\056\004" +
    "\073\005\074\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\022\uffe1\024\uffe1\025\uffe1\027\uffe1\035" +
    "\uffe1\036\uffe1\050\uffe1\051\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\066\uffe1\067\uffe1\001\002\000\032\004\043\005\063\017" +
    "\055\021\054\032\047\062\041\071\066\072\056\073\046" +
    "\074\062\075\067\076\045\001\002\000\032\004\043\005" +
    "\063\017\055\021\054\032\047\062\041\071\066\072\056" +
    "\073\046\074\062\075\067\076\045\001\002\000\064\004" +
    "\uffdf\005\uffdf\006\100\007\077\010\076\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\022\uffdf\024" +
    "\uffdf\025\uffdf\027\uffdf\035\uffdf\036\uffdf\050\uffdf\051\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\066\uffdf\067\uffdf\001\002\000" +
    "\032\004\043\005\063\017\055\021\054\032\047\062\041" +
    "\071\066\072\056\073\046\074\062\075\067\076\045\001" +
    "\002\000\032\004\043\005\063\017\055\021\054\032\047" +
    "\062\041\071\066\072\056\073\046\074\062\075\067\076" +
    "\045\001\002\000\032\004\043\005\063\017\055\021\054" +
    "\032\047\062\041\071\066\072\056\073\046\074\062\075" +
    "\067\076\045\001\002\000\064\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\020\uffdd\022\uffdd\024\uffdd\025\uffdd\027\uffdd" +
    "\035\uffdd\036\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\066\uffdd\067\uffdd\001\002\000\064\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\020\uffdc\022\uffdc\024\uffdc\025\uffdc" +
    "\027\uffdc\035\uffdc\036\uffdc\050\uffdc\051\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\066\uffdc\067\uffdc\001\002\000\064\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\022\uffdb\024\uffdb" +
    "\025\uffdb\027\uffdb\035\uffdb\036\uffdb\050\uffdb\051\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\066\uffdb\067\uffdb\001\002\000\064" +
    "\004\uffe0\005\uffe0\006\100\007\077\010\076\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\022\uffe0" +
    "\024\uffe0\025\uffe0\027\uffe0\035\uffe0\036\uffe0\050\uffe0\051" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\066\uffe0\067\uffe0\001\002" +
    "\000\034\004\043\005\063\017\055\021\054\032\047\037" +
    "\044\062\041\071\066\072\056\073\046\074\062\075\067" +
    "\076\045\001\002\000\036\020\uffec\022\uffec\024\uffec\025" +
    "\uffec\027\uffec\035\uffec\036\uffec\050\uffec\051\uffec\053\uffec" +
    "\054\uffec\055\uffec\066\uffec\067\uffec\001\002\000\064\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\022\uffd2\024" +
    "\uffd2\025\uffd2\027\uffd2\035\uffd2\036\uffd2\050\uffd2\051\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\066\uffd2\067\uffd2\001\002\000" +
    "\004\023\112\001\002\000\064\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\020\uffd3\022\uffd3\024\uffd3\025\uffd3\027\uffd3" +
    "\035\uffd3\036\uffd3\050\uffd3\051\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\066\uffd3\067\uffd3\001\002\000\006\024\uffb9\076\114" +
    "\001\002\000\004\024\124\001\002\000\004\026\122\001" +
    "\002\000\006\024\uffba\027\116\001\002\000\004\076\117" +
    "\001\002\000\004\026\120\001\002\000\034\004\043\005" +
    "\063\017\055\021\054\032\047\037\044\062\041\071\066" +
    "\072\056\073\046\074\062\075\067\076\045\001\002\000" +
    "\006\024\uffb8\027\uffb8\001\002\000\034\004\043\005\063" +
    "\017\055\021\054\032\047\037\044\062\041\071\066\072" +
    "\056\073\046\074\062\075\067\076\045\001\002\000\006" +
    "\024\uffb7\027\uffb7\001\002\000\064\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\027" +
    "\uffbb\035\uffbb\036\uffbb\050\uffbb\051\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\066\uffbb\067\uffbb\001\002\000\064\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\020\uffd9\022\uffd9\024\uffd9\025" +
    "\uffd9\027\uffd9\035\uffd9\036\uffd9\050\uffd9\051\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\066\uffd9\067\uffd9\001\002\000\036\004" +
    "\043\005\063\017\055\020\131\021\054\032\047\037\044" +
    "\062\041\071\066\072\056\073\046\074\062\075\067\076" +
    "\045\001\002\000\006\020\133\027\132\001\002\000\006" +
    "\020\uffcb\027\uffcb\001\002\000\064\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\020\uffcd\022\uffcd\024\uffcd\025\uffcd\027" +
    "\uffcd\035\uffcd\036\uffcd\050\uffcd\051\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\066\uffcd\067\uffcd\001\002\000\034\004\043\005" +
    "\063\017\055\021\054\032\047\037\044\062\041\071\066" +
    "\072\056\073\046\074\062\075\067\076\045\001\002\000" +
    "\064\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce\022" +
    "\uffce\024\uffce\025\uffce\027\uffce\035\uffce\036\uffce\050\uffce" +
    "\051\uffce\053\uffce\054\uffce\055\uffce\066\uffce\067\uffce\001" +
    "\002\000\010\020\uffcc\022\uffcc\027\uffcc\001\002\000\034" +
    "\004\043\005\063\017\055\021\054\032\047\037\044\062" +
    "\041\071\066\072\056\073\046\074\062\075\067\076\045" +
    "\001\002\000\036\020\uffee\022\uffee\024\uffee\025\uffee\027" +
    "\uffee\035\105\036\uffee\050\uffee\051\uffee\053\uffee\054\uffee" +
    "\055\uffee\066\uffee\067\uffee\001\002\000\004\020\140\001" +
    "\002\000\064\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020" +
    "\uffcf\022\uffcf\024\uffcf\025\uffcf\027\uffcf\035\uffcf\036\uffcf" +
    "\050\uffcf\051\uffcf\053\uffcf\054\uffcf\055\uffcf\066\uffcf\067" +
    "\uffcf\001\002\000\064\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\020\uffbe\022\uffbe\024\uffbe\025\uffbe\027\uffbe\035\uffbe" +
    "\036\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe\066" +
    "\uffbe\067\uffbe\001\002\000\006\022\147\027\132\001\002" +
    "\000\010\022\uffcb\025\144\027\uffcb\001\002\000\034\004" +
    "\043\005\063\017\055\021\054\032\047\037\044\062\041" +
    "\071\066\072\056\073\046\074\062\075\067\076\045\001" +
    "\002\000\004\022\146\001\002\000\064\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\020\uffbc\022\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\035\uffbc\036\uffbc\050\uffbc\051\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\066\uffbc\067\uffbc\001\002\000\064\004\uffbd" +
    "\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\024\uffbd" +
    "\025\uffbd\027\uffbd\035\uffbd\036\uffbd\050\uffbd\051\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\066\uffbd\067\uffbd\001\002\000\074" +
    "\002\uffab\003\uffab\004\uffab\005\uffab\017\uffab\021\uffab\032" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\046\uffab\047\uffab\050\uffab\052\uffab\053\uffab\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\071\uffab\072\uffab\073\uffab" +
    "\074\uffab\075\uffab\076\uffab\001\002\000\064\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\020\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\027\uffd6\035\uffd6\036\uffd6\050\uffd6\051\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\066\uffd6\067\uffd6\001\002\000\036\020" +
    "\uffea\022\uffea\024\uffea\025\uffea\027\uffea\035\uffea\036\uffea" +
    "\050\uffea\051\uffea\053\uffea\054\uffea\055\uffea\066\uffea\067" +
    "\uffea\001\002\000\064\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\020\uffd8\022\uffd8\024\uffd8\025\uffd8\027\uffd8\035\uffd8" +
    "\036\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8\055\uffd8\066" +
    "\uffd8\067\uffd8\001\002\000\032\004\043\005\063\017\055" +
    "\021\054\032\047\062\041\071\066\072\056\073\046\074" +
    "\062\075\067\076\045\001\002\000\032\004\043\005\063" +
    "\017\055\021\054\032\047\062\041\071\066\072\056\073" +
    "\046\074\062\075\067\076\045\001\002\000\032\004\043" +
    "\005\063\017\055\021\054\032\047\062\041\071\066\072" +
    "\056\073\046\074\062\075\067\076\045\001\002\000\032" +
    "\004\043\005\063\017\055\021\054\032\047\062\041\071" +
    "\066\072\056\073\046\074\062\075\067\076\045\001\002" +
    "\000\056\004\073\005\074\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\020\uffe3\022\uffe3\024\uffe3\025\uffe3" +
    "\027\uffe3\035\uffe3\036\uffe3\050\uffe3\051\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\066\uffe3\067\uffe3\001\002\000\056\004\073" +
    "\005\074\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\022\uffe5\024\uffe5\025\uffe5\027\uffe5\035\uffe5" +
    "\036\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5\055\uffe5\066" +
    "\uffe5\067\uffe5\001\002\000\056\004\073\005\074\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\022" +
    "\uffe2\024\uffe2\025\uffe2\027\uffe2\035\uffe2\036\uffe2\050\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\055\uffe2\066\uffe2\067\uffe2\001" +
    "\002\000\056\004\073\005\074\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\022\uffe4\024\uffe4\025" +
    "\uffe4\027\uffe4\035\uffe4\036\uffe4\050\uffe4\051\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\066\uffe4\067\uffe4\001\002\000\064\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\022\uffd7\024" +
    "\uffd7\025\uffd7\027\uffd7\035\uffd7\036\uffd7\050\uffd7\051\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\066\uffd7\067\uffd7\001\002\000" +
    "\032\004\043\005\063\017\055\021\054\032\047\062\041" +
    "\071\066\072\056\073\046\074\062\075\067\076\045\001" +
    "\002\000\032\004\043\005\063\017\055\021\054\032\047" +
    "\062\041\071\066\072\056\073\046\074\062\075\067\076" +
    "\045\001\002\000\052\011\uffe8\012\uffe8\013\154\014\156" +
    "\015\155\016\157\020\uffe8\022\uffe8\024\uffe8\025\uffe8\027" +
    "\uffe8\035\uffe8\036\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\066\uffe8\067\uffe8\001\002\000\052\011\uffe7\012" +
    "\uffe7\013\154\014\156\015\155\016\157\020\uffe7\022\uffe7" +
    "\024\uffe7\025\uffe7\027\uffe7\035\uffe7\036\uffe7\050\uffe7\051" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\066\uffe7\067\uffe7\001\002" +
    "\000\076\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\027\uffc8\030" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\050\uffc8\051\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\066\uffc8\067\uffc8\001\002\000" +
    "\004\022\173\001\002\000\076\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\024\uffca" +
    "\025\uffca\027\uffca\030\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\050\uffca\051\uffca\053\uffca\054\uffca\055\uffca\066\uffca" +
    "\067\uffca\001\002\000\060\003\uffa5\004\uffa5\005\uffa5\017" +
    "\uffa5\021\uffa5\032\uffa5\037\uffa5\041\uffa5\043\uffa5\044\uffa5" +
    "\046\uffa5\047\uffa5\053\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5" +
    "\001\002\000\004\051\176\001\002\000\022\040\ufff9\053" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\076\ufff9" +
    "\001\002\000\022\040\013\053\200\057\011\060\012\061" +
    "\015\062\021\063\017\076\016\001\002\000\024\002\ufffd" +
    "\040\ufffd\053\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063" +
    "\ufffd\076\ufffd\001\002\000\014\057\011\060\012\061\015" +
    "\062\021\076\016\001\002\000\060\003\uffa4\004\uffa4\005" +
    "\uffa4\017\uffa4\021\uffa4\032\uffa4\037\uffa4\041\uffa4\043\uffa4" +
    "\044\uffa4\046\uffa4\047\uffa4\053\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4" +
    "\076\uffa4\001\002\000\060\003\uffa3\004\uffa3\005\uffa3\017" +
    "\uffa3\021\uffa3\032\uffa3\037\uffa3\041\uffa3\043\uffa3\044\uffa3" +
    "\046\uffa3\047\uffa3\053\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3" +
    "\001\002\000\004\017\205\001\002\000\020\020\ufff0\057" +
    "\011\060\012\061\015\062\021\070\211\076\016\001\002" +
    "\000\006\020\ufff6\027\321\001\002\000\004\076\320\001" +
    "\002\000\004\020\216\001\002\000\014\057\011\060\012" +
    "\061\015\062\021\076\016\001\002\000\006\020\ufff3\027" +
    "\ufff3\001\002\000\004\020\ufff5\001\002\000\004\076\215" +
    "\001\002\000\006\020\ufff1\027\ufff1\001\002\000\062\003" +
    "\uffb5\004\uffb5\005\uffb5\017\uffb5\021\uffb5\032\uffb5\033\220" +
    "\037\uffb5\041\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\053" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\071\uffb5\072\uffb5" +
    "\073\uffb5\074\uffb5\075\uffb5\076\uffb5\001\002\000\060\003" +
    "\237\004\043\005\063\017\055\021\054\032\047\037\044" +
    "\041\234\043\227\044\243\046\236\047\230\053\317\057" +
    "\011\060\012\061\015\062\235\071\066\072\056\073\046" +
    "\074\062\075\067\076\242\001\002\000\014\057\011\060" +
    "\012\061\015\062\021\076\016\001\002\000\060\003\uffb5" +
    "\004\uffb5\005\uffb5\017\uffb5\021\uffb5\032\uffb5\037\uffb5\041" +
    "\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\053\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\071\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\001\002\000\060\003\237\004\043" +
    "\005\063\017\055\021\054\032\047\037\044\041\234\043" +
    "\227\044\243\046\236\047\230\053\244\057\011\060\012" +
    "\061\015\062\235\071\066\072\056\073\046\074\062\075" +
    "\067\076\242\001\002\000\066\003\uffb3\004\uffb3\005\uffb3" +
    "\017\uffb3\021\uffb3\032\uffb3\037\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\052\uffb3\053\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\001\002\000\004\025\316" +
    "\001\002\000\050\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\126\021\032\025\uffd1\030\035\033\033\034\034\035" +
    "\uffd1\036\uffd1\001\002\000\066\003\uffb2\004\uffb2\005\uffb2" +
    "\017\uffb2\021\uffb2\032\uffb2\037\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\046\uffb2\047\uffb2\050\uffb2\052\uffb2\053\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\001\002\000\004\076\301" +
    "\001\002\000\034\004\043\005\063\017\055\021\054\032" +
    "\047\037\044\062\041\071\066\072\056\073\046\074\062" +
    "\075\067\076\045\001\002\000\066\003\uffb0\004\uffb0\005" +
    "\uffb0\017\uffb0\021\uffb0\032\uffb0\037\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\052\uffb0\053" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\071\uffb0\072\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\001\002\000\066\003" +
    "\uffb6\004\uffb6\005\uffb6\017\uffb6\021\uffb6\032\uffb6\037\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\052\uffb6\053\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\001" +
    "\002\000\066\003\uffad\004\uffad\005\uffad\017\uffad\021\uffad" +
    "\032\uffad\037\uffad\041\uffad\042\uffad\043\uffad\044\uffad\046" +
    "\uffad\047\uffad\050\uffad\052\uffad\053\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\076\uffad\001\002\000\034\004\043\005\063\017\055" +
    "\021\054\032\047\037\044\062\041\071\066\072\056\073" +
    "\046\074\062\075\067\076\045\001\002\000\040\004\043" +
    "\005\063\017\055\021\054\032\047\057\011\060\012\061" +
    "\015\062\235\071\066\072\056\073\046\074\062\075\067" +
    "\076\242\001\002\000\036\004\043\005\063\017\055\021" +
    "\054\025\252\032\047\037\044\062\041\071\066\072\056" +
    "\073\046\074\062\075\067\076\045\001\002\000\066\003" +
    "\uffac\004\uffac\005\uffac\017\uffac\021\uffac\032\uffac\037\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\046\uffac\047\uffac\050" +
    "\uffac\052\uffac\053\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\001" +
    "\002\000\066\003\uffaf\004\uffaf\005\uffaf\017\uffaf\021\uffaf" +
    "\032\uffaf\037\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\052\uffaf\053\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075" +
    "\uffaf\076\uffaf\001\002\000\066\003\uffb1\004\uffb1\005\uffb1" +
    "\017\uffb1\021\uffb1\032\uffb1\037\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\052\uffb1\053\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\001\002\000\056\004\uffc5" +
    "\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\023\112" +
    "\025\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\076\uffa8\001\002\000\034\004\043\005\063\017\055" +
    "\021\054\032\047\037\044\062\041\071\066\072\056\073" +
    "\046\074\062\075\067\076\045\001\002\000\024\002\ufff7" +
    "\040\ufff7\053\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\076\ufff7\001\002\000\066\003\uffae\004\uffae\005\uffae" +
    "\017\uffae\021\uffae\032\uffae\037\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\046\uffae\047\uffae\050\uffae\052\uffae\053\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\071\uffae\072\uffae\073" +
    "\uffae\074\uffae\075\uffae\076\uffae\001\002\000\004\054\247" +
    "\001\002\000\060\003\uffb5\004\uffb5\005\uffb5\017\uffb5\021" +
    "\uffb5\032\uffb5\037\uffb5\041\uffb5\043\uffb5\044\uffb5\046\uffb5" +
    "\047\uffb5\053\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\071" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\001\002" +
    "\000\060\003\237\004\043\005\063\017\055\021\054\032" +
    "\047\037\044\041\234\043\227\044\243\046\236\047\230" +
    "\053\251\057\011\060\012\061\015\062\235\071\066\072" +
    "\056\073\046\074\062\075\067\076\242\001\002\000\066" +
    "\003\uff9e\004\uff9e\005\uff9e\017\uff9e\021\uff9e\032\uff9e\037" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\052\uff9e\053\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\001\002\000\066\003\uff98\004\uff98\005\uff98\017\uff98\021" +
    "\uff98\032\uff98\037\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\046\uff98\047\uff98\050\uff98\052\uff98\053\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff98\071\uff98\072\uff98\073\uff98\074\uff98" +
    "\075\uff98\076\uff98\001\002\000\004\025\254\001\002\000" +
    "\066\003\uff99\004\uff99\005\uff99\017\uff99\021\uff99\032\uff99" +
    "\037\uff99\041\uff99\042\uff99\043\uff99\044\uff99\046\uff99\047" +
    "\uff99\050\uff99\052\uff99\053\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076" +
    "\uff99\001\002\000\004\055\256\001\002\000\062\003\uffb5" +
    "\004\uffb5\005\uffb5\017\uffb5\021\uffb5\032\uffb5\037\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\053\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\001\002\000\062\003\237" +
    "\004\043\005\063\017\055\021\054\032\047\037\044\041" +
    "\234\042\260\043\227\044\243\046\236\047\230\053\261" +
    "\057\011\060\012\061\015\062\235\071\066\072\056\073" +
    "\046\074\062\075\067\076\242\001\002\000\060\003\uffb5" +
    "\004\uffb5\005\uffb5\017\uffb5\021\uffb5\032\uffb5\037\uffb5\041" +
    "\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\053\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\071\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\001\002\000\066\003\uffa2\004\uffa2" +
    "\005\uffa2\017\uffa2\021\uffa2\032\uffa2\037\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2" +
    "\053\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\001\002\000\060" +
    "\003\237\004\043\005\063\017\055\021\054\032\047\037" +
    "\044\041\234\043\227\044\243\046\236\047\230\053\263" +
    "\057\011\060\012\061\015\062\235\071\066\072\056\073" +
    "\046\074\062\075\067\076\242\001\002\000\066\003\uffa1" +
    "\004\uffa1\005\uffa1\017\uffa1\021\uffa1\032\uffa1\037\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\052\uffa1\053\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\001\002" +
    "\000\010\050\267\051\266\053\uff9a\001\002\000\004\053" +
    "\300\001\002\000\006\050\267\052\uff9a\001\002\000\034" +
    "\004\043\005\063\017\055\021\054\032\047\037\044\062" +
    "\041\071\066\072\056\073\046\074\062\075\067\076\045" +
    "\001\002\000\004\054\271\001\002\000\064\003\uffb5\004" +
    "\uffb5\005\uffb5\017\uffb5\021\uffb5\032\uffb5\037\uffb5\041\uffb5" +
    "\043\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5\052\uffb5\053" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\071\uffb5\072\uffb5" +
    "\073\uffb5\074\uffb5\075\uffb5\076\uffb5\001\002\000\064\003" +
    "\237\004\043\005\063\017\055\021\054\032\047\037\044" +
    "\041\234\043\227\044\243\046\236\047\230\050\267\052" +
    "\uff9a\053\uff9a\057\011\060\012\061\015\062\235\071\066" +
    "\072\056\073\046\074\062\075\067\076\242\001\002\000" +
    "\006\052\uff9b\053\uff9b\001\002\000\004\052\275\001\002" +
    "\000\060\003\uffb5\004\uffb5\005\uffb5\017\uffb5\021\uffb5\032" +
    "\uffb5\037\uffb5\041\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5" +
    "\053\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\001\002\000\060" +
    "\003\237\004\043\005\063\017\055\021\054\032\047\037" +
    "\044\041\234\043\227\044\243\046\236\047\230\053\277" +
    "\057\011\060\012\061\015\062\235\071\066\072\056\073" +
    "\046\074\062\075\067\076\242\001\002\000\066\003\uff9d" +
    "\004\uff9d\005\uff9d\017\uff9d\021\uff9d\032\uff9d\037\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\052\uff9d\053\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\001\002" +
    "\000\066\003\uff9c\004\uff9c\005\uff9c\017\uff9c\021\uff9c\032" +
    "\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\052\uff9c\053\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c" +
    "\076\uff9c\001\002\000\004\065\302\001\002\000\034\004" +
    "\043\005\063\017\055\021\054\032\047\037\044\062\041" +
    "\071\066\072\056\073\046\074\062\075\067\076\045\001" +
    "\002\000\004\066\304\001\002\000\034\004\043\005\063" +
    "\017\055\021\054\032\047\037\044\062\041\071\066\072" +
    "\056\073\046\074\062\075\067\076\045\001\002\000\006" +
    "\054\306\067\307\001\002\000\060\003\uffb5\004\uffb5\005" +
    "\uffb5\017\uffb5\021\uffb5\032\uffb5\037\uffb5\041\uffb5\043\uffb5" +
    "\044\uffb5\046\uffb5\047\uffb5\053\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\001\002\000\034\004\043\005\063\017\055\021" +
    "\054\032\047\037\044\062\041\071\066\072\056\073\046" +
    "\074\062\075\067\076\045\001\002\000\004\054\311\001" +
    "\002\000\060\003\uffb5\004\uffb5\005\uffb5\017\uffb5\021\uffb5" +
    "\032\uffb5\037\uffb5\041\uffb5\043\uffb5\044\uffb5\046\uffb5\047" +
    "\uffb5\053\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\071\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\001\002\000" +
    "\060\003\237\004\043\005\063\017\055\021\054\032\047" +
    "\037\044\041\234\043\227\044\243\046\236\047\230\053" +
    "\313\057\011\060\012\061\015\062\235\071\066\072\056" +
    "\073\046\074\062\075\067\076\242\001\002\000\066\003" +
    "\uff9f\004\uff9f\005\uff9f\017\uff9f\021\uff9f\032\uff9f\037\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\052\uff9f\053\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\001" +
    "\002\000\060\003\237\004\043\005\063\017\055\021\054" +
    "\032\047\037\044\041\234\043\227\044\243\046\236\047" +
    "\230\053\315\057\011\060\012\061\015\062\235\071\066" +
    "\072\056\073\046\074\062\075\067\076\242\001\002\000" +
    "\066\003\uffa0\004\uffa0\005\uffa0\017\uffa0\021\uffa0\032\uffa0" +
    "\037\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\052\uffa0\053\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076" +
    "\uffa0\001\002\000\066\003\uffb4\004\uffb4\005\uffb4\017\uffb4" +
    "\021\uffb4\032\uffb4\037\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\052\uffb4\053\uffb4\057\uffb4" +
    "\060\uffb4\061\uffb4\062\uffb4\071\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\001\002\000\024\002\ufff8\040\ufff8" +
    "\053\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\076" +
    "\ufff8\001\002\000\006\020\ufff2\027\ufff2\001\002\000\016" +
    "\057\011\060\012\061\015\062\021\070\211\076\016\001" +
    "\002\000\006\020\ufff4\027\ufff4\001\002\000\006\025\uffc5" +
    "\031\uffc5\001\002\000\006\025\325\031\030\001\002\000" +
    "\024\002\uffff\040\uffff\045\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\063\uffff\076\uffff\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\002\003\047\004\001\001\000\002\001" +
    "\001\000\004\050\006\001\001\000\004\042\323\001\001" +
    "\000\012\036\017\037\013\040\007\041\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\173\001\001\000\010\024\023\027\022\042\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\047\004\051\005\067\011\171" +
    "\012\063\013\056\014\070\015\037\016\041\017\071\020" +
    "\060\021\064\022\036\023\050\024\057\042\024\001\001" +
    "\000\002\001\001\000\042\003\047\004\051\005\067\011" +
    "\052\012\063\013\056\014\070\015\037\016\041\017\071" +
    "\020\060\021\064\022\036\023\050\024\057\042\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\047\004\051\005\067\012" +
    "\063\022\163\023\050\024\057\042\024\001\001\000\002" +
    "\001\001\000\022\003\047\004\051\005\067\012\063\022" +
    "\152\023\050\024\057\042\024\001\001\000\034\003\047" +
    "\004\051\005\067\012\063\015\037\016\041\017\071\020" +
    "\060\021\151\022\036\023\050\024\057\042\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\047\004" +
    "\051\005\067\012\063\022\150\023\050\024\057\042\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\047\004\051\005\067" +
    "\010\141\011\142\012\063\013\056\014\070\015\037\016" +
    "\041\017\071\020\060\021\064\022\036\023\050\024\057" +
    "\042\024\001\001\000\042\003\047\004\051\005\067\011" +
    "\136\012\063\013\056\014\070\015\037\016\041\017\071" +
    "\020\060\021\064\022\036\023\050\024\057\042\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\047\004" +
    "\051\005\067\012\063\022\124\023\050\024\057\042\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\106\005\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\047\004" +
    "\051\005\067\012\063\020\103\022\036\023\050\024\057" +
    "\042\024\001\001\000\024\003\047\004\051\005\067\012" +
    "\063\020\074\022\036\023\050\024\057\042\024\001\001" +
    "\000\002\001\001\000\022\003\047\004\051\005\067\012" +
    "\063\022\102\023\050\024\057\042\024\001\001\000\022" +
    "\003\047\004\051\005\067\012\063\022\101\023\050\024" +
    "\057\042\024\001\001\000\022\003\047\004\051\005\067" +
    "\012\063\022\100\023\050\024\057\042\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\047\004\051\005\067\012\063\015" +
    "\037\016\041\017\071\020\060\021\105\022\036\023\050" +
    "\024\057\042\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\112" +
    "\007\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\047\004\051\005\067\011\120\012\063\013\056\014" +
    "\070\015\037\016\041\017\071\020\060\021\064\022\036" +
    "\023\050\024\057\042\024\001\001\000\002\001\001\000" +
    "\042\003\047\004\051\005\067\011\122\012\063\013\056" +
    "\014\070\015\037\016\041\017\071\020\060\021\064\022" +
    "\036\023\050\024\057\042\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\047\004" +
    "\051\005\067\010\126\011\127\012\063\013\056\014\070" +
    "\015\037\016\041\017\071\020\060\021\064\022\036\023" +
    "\050\024\057\042\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\047\004\051\005" +
    "\067\011\133\012\063\013\056\014\070\015\037\016\041" +
    "\017\071\020\060\021\064\022\036\023\050\024\057\042" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\047\004\051\005\067\012\063\014\135\015\037\016" +
    "\041\017\071\020\060\021\064\022\036\023\050\024\057" +
    "\042\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\047\004\051\005\067\011\144\012" +
    "\063\013\056\014\070\015\037\016\041\017\071\020\060" +
    "\021\064\022\036\023\050\024\057\042\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\047\004\051\005\067\012\063\017\162" +
    "\020\060\022\036\023\050\024\057\042\024\001\001\000" +
    "\026\003\047\004\051\005\067\012\063\017\161\020\060" +
    "\022\036\023\050\024\057\042\024\001\001\000\026\003" +
    "\047\004\051\005\067\012\063\017\160\020\060\022\036" +
    "\023\050\024\057\042\024\001\001\000\026\003\047\004" +
    "\051\005\067\012\063\017\157\020\060\022\036\023\050" +
    "\024\057\042\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\047\004\051\005\067\012\063\016\167\017" +
    "\071\020\060\022\036\023\050\024\057\042\024\001\001" +
    "\000\030\003\047\004\051\005\067\012\063\016\166\017" +
    "\071\020\060\022\036\023\050\024\057\042\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\176\001\001\000\012\036\017\037" +
    "\013\040\007\041\021\001\001\000\002\001\001\000\004" +
    "\041\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\041\206\043\207\044\205\045\212" +
    "\046\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\216\001\001\000\064\003\047\004\051\005\067" +
    "\011\223\012\063\013\056\014\070\015\037\016\041\017" +
    "\071\020\060\021\064\022\036\023\050\024\224\026\231" +
    "\027\222\030\240\031\230\032\237\033\244\034\232\036" +
    "\225\041\021\042\024\001\001\000\004\041\220\001\001" +
    "\000\004\025\221\001\001\000\064\003\047\004\051\005" +
    "\067\011\223\012\063\013\056\014\070\015\037\016\041" +
    "\017\071\020\060\021\064\022\036\023\050\024\224\026" +
    "\231\027\222\030\240\031\230\032\237\033\244\034\232" +
    "\036\225\041\021\042\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\047\004\051\005\067\011\263\012" +
    "\063\013\056\014\070\015\037\016\041\017\071\020\060" +
    "\021\064\022\036\023\050\024\057\042\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\047\004\051\005\067\011\254\012\063\013\056\014" +
    "\070\015\037\016\041\017\071\020\060\021\064\022\036" +
    "\023\050\024\057\042\024\001\001\000\024\003\047\004" +
    "\051\005\067\012\063\022\163\023\050\024\057\041\173" +
    "\042\024\001\001\000\042\003\047\004\051\005\067\011" +
    "\252\012\063\013\056\014\070\015\037\016\041\017\071" +
    "\020\060\021\064\022\036\023\050\024\057\042\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\047\004\051\005\067\011" +
    "\245\012\063\013\056\014\070\015\037\016\041\017\071" +
    "\020\060\021\064\022\036\023\050\024\057\042\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\247\001\001\000\064\003\047\004\051\005" +
    "\067\011\223\012\063\013\056\014\070\015\037\016\041" +
    "\017\071\020\060\021\064\022\036\023\050\024\224\026" +
    "\231\027\222\030\240\031\230\032\237\033\244\034\232" +
    "\036\225\041\021\042\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\256\001\001\000\064\003\047\004" +
    "\051\005\067\011\223\012\063\013\056\014\070\015\037" +
    "\016\041\017\071\020\060\021\064\022\036\023\050\024" +
    "\224\026\231\027\222\030\240\031\230\032\237\033\244" +
    "\034\232\036\225\041\021\042\024\001\001\000\004\025" +
    "\261\001\001\000\002\001\001\000\064\003\047\004\051" +
    "\005\067\011\223\012\063\013\056\014\070\015\037\016" +
    "\041\017\071\020\060\021\064\022\036\023\050\024\224" +
    "\026\231\027\222\030\240\031\230\032\237\033\244\034" +
    "\232\036\225\041\021\042\024\001\001\000\002\001\001" +
    "\000\004\035\264\001\001\000\002\001\001\000\004\035" +
    "\273\001\001\000\042\003\047\004\051\005\067\011\267" +
    "\012\063\013\056\014\070\015\037\016\041\017\071\020" +
    "\060\021\064\022\036\023\050\024\057\042\024\001\001" +
    "\000\002\001\001\000\004\025\271\001\001\000\066\003" +
    "\047\004\051\005\067\011\223\012\063\013\056\014\070" +
    "\015\037\016\041\017\071\020\060\021\064\022\036\023" +
    "\050\024\224\026\231\027\222\030\240\031\230\032\237" +
    "\033\244\034\232\035\272\036\225\041\021\042\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\275" +
    "\001\001\000\064\003\047\004\051\005\067\011\223\012" +
    "\063\013\056\014\070\015\037\016\041\017\071\020\060" +
    "\021\064\022\036\023\050\024\224\026\231\027\222\030" +
    "\240\031\230\032\237\033\244\034\232\036\225\041\021" +
    "\042\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\047\004\051\005\067\011\302" +
    "\012\063\013\056\014\070\015\037\016\041\017\071\020" +
    "\060\021\064\022\036\023\050\024\057\042\024\001\001" +
    "\000\002\001\001\000\042\003\047\004\051\005\067\011" +
    "\304\012\063\013\056\014\070\015\037\016\041\017\071" +
    "\020\060\021\064\022\036\023\050\024\057\042\024\001" +
    "\001\000\002\001\001\000\004\025\313\001\001\000\042" +
    "\003\047\004\051\005\067\011\307\012\063\013\056\014" +
    "\070\015\037\016\041\017\071\020\060\021\064\022\036" +
    "\023\050\024\057\042\024\001\001\000\002\001\001\000" +
    "\004\025\311\001\001\000\064\003\047\004\051\005\067" +
    "\011\223\012\063\013\056\014\070\015\037\016\041\017" +
    "\071\020\060\021\064\022\036\023\050\024\224\026\231" +
    "\027\222\030\240\031\230\032\237\033\244\034\232\036" +
    "\225\041\021\042\024\001\001\000\002\001\001\000\064" +
    "\003\047\004\051\005\067\011\223\012\063\013\056\014" +
    "\070\015\037\016\041\017\071\020\060\021\064\022\036" +
    "\023\050\024\224\026\231\027\222\030\240\031\230\032" +
    "\237\033\244\034\232\036\225\041\021\042\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\206\046\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errors = new ErrorHandler();
   Lexer lex = (Lexer)getScanner();
   lex.setErrorHandler(errors);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private ErrorHandler errors;
   public void syntax_error(Symbol token) {
     errors.syntaxError((Token)token);
   }
   private Node root;
   public Node getRoot() {
     return root;
   }
   public Node setRoot(Node root){
      this.root = root;
      return root;
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= IMPORTs DEFINITIONs 
            {
              Node RESULT =null;
		List<DefModule> imports = (List<DefModule>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DefinitionCollection declarations = (DefinitionCollection)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.setRoot(new Module(imports, declarations)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTs ::= IMPORTs IMPORT NAME SEMICOLON 
            {
              List<DefModule> RESULT =null;
		List<DefModule> imports = (List<DefModule>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<String> name = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = imports; imports.add(new DefModule(name)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORTs",37, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTs ::= 
            {
              List<DefModule> RESULT =null;
		 RESULT = new ArrayList<DefModule>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPORTs",37, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STRUCT_DEF ::= STRUCT IDEN IS DEFINITIONs END 
            {
              DefStruct RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		DefinitionCollection ds = (DefinitionCollection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DefStruct(name, ds.getVariables(), ds.getFunctions()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_DEF",30, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINITIONs ::= DEFINITIONs STRUCT_DEF 
            {
              DefinitionCollection RESULT =null;
		DefinitionCollection defs = (DefinitionCollection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DefStruct defStruct = (DefStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = defs; defs.add(defStruct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINITIONs",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINITIONs ::= DEFINITIONs FUN_DEF 
            {
              DefinitionCollection RESULT =null;
		DefinitionCollection defs = (DefinitionCollection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DefFunc defFun = (DefFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = defs; defs.add(defFun); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINITIONs",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEFINITIONs ::= DEFINITIONs VAR_DEF 
            {
              DefinitionCollection RESULT =null;
		DefinitionCollection defs = (DefinitionCollection)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		DefVar defVar = (DefVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = defs; defs.add(defVar); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINITIONs",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEFINITIONs ::= 
            {
              DefinitionCollection RESULT =null;
		 RESULT = new DefinitionCollection(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFINITIONs",38, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUN_DEF ::= FUNC IDEN OPEN_PAR FUNC_PARAMs CLOSE_PAR STMTs END 
            {
              DefFunc RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		List<DefFunc.Param> params = (List<DefFunc.Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DefFunc(id, params, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUN_DEF",29, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUN_DEF ::= FUNC IDEN OPEN_PAR FUNC_PARAMs CLOSE_PAR R_ARROW TYPE STMTs END 
            {
              DefFunc RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		List<DefFunc.Param> params = (List<DefFunc.Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DefFunc(id, params, type, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUN_DEF",29, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNC_PARAMs ::= AT_LEAST_ONE_PARAM 
            {
              List<DefFunc.Param> RESULT =null;
		List<DefFunc.Param> l = (List<DefFunc.Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMs",33, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC_PARAMs ::= NO_PARAM 
            {
              List<DefFunc.Param> RESULT =null;
		List<DefFunc.Param> l = (List<DefFunc.Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_PARAMs",33, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AT_LEAST_ONE_PARAM ::= AT_LEAST_ONE_PARAM COMMA PARAM 
            {
              List<DefFunc.Param> RESULT =null;
		List<DefFunc.Param> params = (List<DefFunc.Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		DefFunc.Param p = (DefFunc.Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params; params.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AT_LEAST_ONE_PARAM",34, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AT_LEAST_ONE_PARAM ::= PARAM 
            {
              List<DefFunc.Param> RESULT =null;
		DefFunc.Param p = (DefFunc.Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<DefFunc.Param>(); RESULT.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AT_LEAST_ONE_PARAM",34, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAM ::= TYPE IDEN 
            {
              DefFunc.Param RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefFunc.Param(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",36, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAM ::= REF TYPE IDEN 
            {
              DefFunc.Param RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefFunc.Param(t, id, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAM",36, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NO_PARAM ::= 
            {
              List<DefFunc.Param> RESULT =null;
		 RESULT = new ArrayList<DefFunc.Param>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NO_PARAM",35, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPR ::= DISJUNCTION 
            {
              Expr RESULT =null;
		Expr d = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DISJUNCTION ::= DISJUNCTION OR CONJUNCTION 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new OperBin(OperBin.Operators.OR, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DISJUNCTION",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DISJUNCTION ::= CONJUNCTION 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DISJUNCTION",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONJUNCTION ::= CONJUNCTION AND NEGATION 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.AND, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNCTION",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONJUNCTION ::= NEGATION 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNCTION",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NEGATION ::= NOT NEGATION 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperUn(OperUn.Operators.NOT, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATION",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NEGATION ::= EQUALITY 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATION",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EQUALITY ::= EQUALITY EQUAL COMPARISON 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.EQUALS, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EQUALITY ::= EQUALITY NOT_EQUAL COMPARISON 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.NOTEQUALS, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EQUALITY ::= COMPARISON 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EQUALITY",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMPARISON ::= COMPARISON LESS TERM 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new OperBin(OperBin.Operators.LESS, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMPARISON ::= COMPARISON GREATER TERM 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.GREATER, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMPARISON ::= COMPARISON LESS_EQUAL TERM 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.LESS_EQUAL, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMPARISON ::= COMPARISON GREATER_EQUAL TERM 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.GREATER_EQUAL, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMPARISON ::= TERM 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARISON",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERM ::= TERM PLUS FACTOR 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  new OperBin(OperBin.Operators.SUM, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TERM ::= TERM MINUS FACTOR 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.SUBS, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERM ::= FACTOR 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FACTOR ::= FACTOR TIMES UNARY 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.MUL, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTOR ::= FACTOR DIV UNARY 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.DIV, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= FACTOR MOD UNARY 
            {
              Expr RESULT =null;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperBin(OperBin.Operators.MODULO, left, right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= UNARY 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // UNARY ::= MINUS UNARY 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperUn(OperUn.Operators.NEG, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // UNARY ::= PLUS UNARY 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // UNARY ::= PTR UNARY 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperUn(OperUn.Operators.REF, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // UNARY ::= AT UNARY 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperUn(OperUn.Operators.DEREF, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // UNARY ::= PRIMARY 
            {
              Expr RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY",16, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRIMARY ::= LITERAL 
            {
              Expr RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRIMARY ::= NEW STRUCT_LITERAL 
            {
              Expr RESULT =null;
		StructLiteral s = (StructLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new New(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRIMARY ::= NEW ARRAY_LITERAL 
            {
              Expr RESULT =null;
		ArrayLiteral a = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new New(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRIMARY ::= DESIGNATION 
            {
              Expr RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expr) d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRIMARY ::= FUNC_CALL 
            {
              Expr RESULT =null;
		Call x = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (Expr) x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRIMARY ::= OPEN_PAR EXPR CLOSE_PAR 
            {
              Expr RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (Expr) e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMARY",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNC_CALL ::= DESIGNATION OPEN_PAR EXPRs CLOSE_PAR 
            {
              Call RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Expr> e = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Call(d, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNC_CALL ::= DESIGNATION OPEN_PAR CLOSE_PAR 
            {
              Call RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Call(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",17, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRs ::= EXPRs COMMA EXPR 
            {
              List<Expr> RESULT =null;
		List<Expr> more = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = more; more.add((Expr) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRs",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRs ::= EXPR 
            {
              List<Expr> RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(); RESULT.add((Expr) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRs",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DESIGNATION ::= DESIGNATION OPEN_BRACKET EXPR CLOSE_BRACKET 
            {
              Designator RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAccess(d, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATION",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DESIGNATION ::= DESIGNATION DOT IDEN 
            {
              Designator RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAccess(d, name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATION",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DESIGNATION ::= DESIGNATION R_ARROW IDEN 
            {
              Designator RESULT =null;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAccess(new Deref(d), name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATION",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DESIGNATION ::= NAME 
            {
              Designator RESULT =null;
		List<String> name = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESIGNATION",18, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NAME ::= NAME QUADOT IDEN 
            {
              List<String> RESULT =null;
		List<String> more = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = more; more.add(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NAME",32, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NAME ::= IDEN 
            {
              List<String> RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NAME",32, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LITERAL ::= NAT 
            {
              Literal RESULT =null;
		Natural n = (Natural)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LITERAL ::= TRUE 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LITERAL ::= FALSE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LITERAL ::= ARRAY_LITERAL 
            {
              Literal RESULT =null;
		ArrayLiteral a = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LITERAL ::= STRUCT_LITERAL 
            {
              Literal RESULT =null;
		StructLiteral s = (StructLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LITERAL ::= NULL 
            {
              Literal RESULT =null;
		Null n = (Null)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERAL",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARRAY_LITERAL ::= OPEN_BRACKET CLOSE_BRACKET 
            {
              ArrayLiteral RESULT =null;
		 RESULT = new ArrayLiteral(new ArrayList<Expr>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LITERAL",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARRAY_LITERAL ::= OPEN_BRACKET EXPRs CLOSE_BRACKET 
            {
              ArrayLiteral RESULT =null;
		List<Expr> exprs = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLiteral(exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LITERAL",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARRAY_LITERAL ::= OPEN_BRACKET EXPR SEMICOLON EXPR CLOSE_BRACKET 
            {
              ArrayLiteral RESULT =null;
		Expr def = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr size = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLiteral(def,size); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LITERAL",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STRUCT_LITERAL ::= IDEN OPEN_CURLY ATRIBUTE_ASSIGNMENTs CLOSE_CURLY 
            {
              StructLiteral RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Map<String,Expr> assigns = (Map<String,Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructLiteral(name, assigns); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCT_LITERAL",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATRIBUTE_ASSIGNMENTs ::= AT_LEAST_ONE_ATR_ASSIGMENT 
            {
              Map<String,Expr> RESULT =null;
		Map<String,Expr> assigns = (Map<String,Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = assigns; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTE_ASSIGNMENTs",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATRIBUTE_ASSIGNMENTs ::= 
            {
              Map<String,Expr> RESULT =null;
		 RESULT = new HashMap<String, Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTE_ASSIGNMENTs",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AT_LEAST_ONE_ATR_ASSIGMENT ::= AT_LEAST_ONE_ATR_ASSIGMENT COMMA IDEN COLON EXPR 
            {
              Map<String,Expr> RESULT =null;
		Map<String,Expr> more = (Map<String,Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = more; more.put(name, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AT_LEAST_ONE_ATR_ASSIGMENT",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AT_LEAST_ONE_ATR_ASSIGMENT ::= IDEN COLON EXPR 
            {
              Map<String,Expr> RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HashMap<String, Expr>(); RESULT.put(name, expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AT_LEAST_ONE_ATR_ASSIGMENT",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STMTs ::= STMTs STMT 
            {
              List<Statement> RESULT =null;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = statements; statements.add(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTs",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STMTs ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMTs",19, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STMT ::= EXPR SEMICOLON 
            {
              Statement RESULT =null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // STMT ::= ASSIGNMENT 
            {
              Statement RESULT =null;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STMT ::= VAR_DEF 
            {
              Statement RESULT =null;
		DefVar v = (DefVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STMT ::= IF_STMT 
            {
              Statement RESULT =null;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STMT ::= FOR_STMT 
            {
              Statement RESULT =null;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STMT ::= WHILE_STMT 
            {
              Statement RESULT =null;
		Statement w = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // STMT ::= MATCH_STMT 
            {
              Statement RESULT =null;
		Statement m = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STMT ::= RETURN_STMT 
            {
              Statement RESULT =null;
		Statement r = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STMT ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STMT",20, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASSIGNMENT ::= DESIGNATION ASSIGN EXPR SEMICOLON 
            {
              Statement RESULT =null;
		Designator name = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assign(name, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",21, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VAR_DEF ::= TYPE IDEN SEMICOLON 
            {
              DefVar RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DefVar(t, name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEF",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VAR_DEF ::= TYPE ASSIGNMENT 
            {
              DefVar RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DefVar(t, ((Var)((Assign)a).getPlace()).getName(), ((Assign)a).getExpr()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DEF",28, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPE ::= IDEN 
            {
              Type RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructType(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPE ::= INT 
            {
              Type RESULT =null;
		 RESULT = IntegerType.getInstance(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TYPE ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = BoolType.getInstance(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TYPE ::= PTR TYPE 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PointerType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TYPE ::= ARRAY TYPE 
            {
              Type RESULT =null;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPE ::= ARRAY NAT TYPE 
            {
              Type RESULT =null;
		Natural size = (Natural)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayType(t, size); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IF_STMT ::= IF EXPR THEN STMTs END 
            {
              Statement RESULT =null;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Statement> then = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(cond, then); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IF_STMT ::= IF EXPR THEN STMTs ELSE STMTs END 
            {
              Statement RESULT =null;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		List<Statement> then = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Statement> els = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(cond, then, els); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",22, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR_STMT ::= FOR IDEN FROM EXPR TO EXPR DO STMTs END 
            {
              Statement RESULT =null;
		String index = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Expr from = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr to = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(index, from, to, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",23, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FOR_STMT ::= FOR IDEN FROM EXPR TO EXPR BY EXPR DO STMTs END 
            {
              Statement RESULT =null;
		String index = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Expr from = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Expr to = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr by = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(index, from, to, by, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",23, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WHILE_STMT ::= WHILE EXPR DO STMTs END 
            {
              Statement RESULT =null;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(cond, statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",24, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MATCH_STMT ::= MATCH EXPR IS CASE_STMTs OTHERWISE STMTs END 
            {
              Statement RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		List<Match.Case> cases = (List<Match.Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Statement> otherwise = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(expr, cases, otherwise); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MATCH_STMT ::= MATCH EXPR CASE_STMTs END 
            {
              Statement RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		List<Match.Case> cases = (List<Match.Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(expr, cases); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",25, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASE_STMTs ::= CASE EXPR DO STMTs CASE_STMTs 
            {
              List<Match.Case> RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<Match.Case> rest = (List<Match.Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 rest.add(new Match.Case(expr, body)); RESULT = rest; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMTs",27, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASE_STMTs ::= 
            {
              List<Match.Case> RESULT =null;
		 RESULT = new ArrayList<Match.Case>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE_STMTs",27, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RETURN_STMT ::= RETURN EXPR SEMICOLON 
            {
              Statement RESULT =null;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",26, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RETURN_STMT ::= RETURN SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Return(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",26, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

