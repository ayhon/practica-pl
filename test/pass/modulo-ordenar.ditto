// func subarray(array int ls, int offset, int size) -> array int
//     ptr array int sub := new [0; size];
//     for i from 0 to size - 1 do 
//         if i + offset < #ls then
//             sub@[i] := ls[i + offset];
//         else 
//             return sub@;
//         end
//     end
//     return sub@;
// end
// 
// func merge(array int rhs, array int lhs) -> array int
//     int size := #rhs + #lhs;
//     ptr array int ls := new [0; size];
// 
//     int r := 0;
//     int l := 0;
//     for i from 0 to size - 1 do
//         if rhs[r] <= lhs[l] then
//             ls@[i] := rhs[r];
//             r := r + 1;
//         else
//             ls@[i] := lhs[l];
//             l := l + 1;
//         end
//     end
//     return ls@;
// end

// func sort(array int ls) -> array int
//     if #ls <= 1 then
//         return ls;
//     else
//         int mid := #ls / 2;
//         array int lhs := subarray(ls, 0, mid);
//         array int rhs := subarray(ls, mid, #ls - mid);
//         lhs := sort(lhs);
//         rhs := sort(rhs);
//         return merge(lhs, rhs);
//     end
// end